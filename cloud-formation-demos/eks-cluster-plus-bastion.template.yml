AWSTemplateFormatVersion: 2010-09-09

# Stand up an EKS cluster backed by Amazon Linux instances.  

Parameters:
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC with the subnets you want to use

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 3 subnets in your selected VPC.

  ClusterSize:
    Type: String
    Description: The Minimum:Desired:Maximum number of EC2 worker nodes in the cluster.  
    Default:  "2:2:6"

  CreateBastionHost:
    Type: String 
    AllowedValues: 
    - true
    - false
    Default: true
    Description: Do you want to create a Bastion Host?  It will be configured with Session Manager, eksctl, kubectl.  Very handy.

  CreateNodeGroup:
    Type: String 
    AllowedValues: 
    - true
    - false
    Default: true
    Description: Do you want to create a Node Group?  Usually you'd want to, unless you want to demo doing it manually.

  BastionRole:
    Type: String 
    Description:  IAM roles NAME (NOT ARN!) of the role we wish this Bastion Host to assume.  Should be same role used to create the cluster.
    Default:  EksClusterCreatorRole

  AmazonLinux2AMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux AMI using the Parameter Store...

  CreateCloud9:
    Type: String 
    AllowedValues: 
    - true
    - false
    Default: true
    Description: Do you want to create a Cloud9 environment?  This will be similar in many ways to a Bastion Host.
    
  RepositoryUrl:
    Type: String
    Description:  URL of a Git repository that you wish to clone into this EnvironmentEC2
    Default: https://github.com/kennyk65/k8s-teaching-demos

Metadata:
  # Controlling the order of the parameters on the CloudFormation page;
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EKS Cluster Details
        Parameters:
          - VpcId
          - SubnetIds
      - Label:
          default: EKS Node Group Details
        Parameters:
          - CreateNodeGroup
          - ClusterSize
      - Label:
          default: Bastion Host Details
        Parameters:
          - CreateBastionHost
          - BastionRole
          - AmazonLinux2AMI
      - Label:
          default: Cloud9 Details
        Parameters:
          - CreateCloud9
          - IAMOwner
          - RepositoryUrl

Conditions:
  CreateBastionHostCondition:  !Equals [ !Ref CreateBastionHost, "true" ]
  CreateNodeGroupCondition:    !Equals [ !Ref CreateNodeGroup, "true" ]
  CreateCloud9Condition:       !Equals [ !Ref CreateCloud9, "true" ]

Resources:

  #  This role Allows Amazon EKS to manage your clusters on your behalf
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSServiceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: 
          - sts:AssumeRole
          - sts:TagSession   # Only needed if running in EKS Auto Mode 
          Principal:
            Service: eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy   # Only needed if running in EKS Auto Mode 
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy        # Only needed if running in EKS Auto Mode 
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy  # Only needed if running in EKS Auto Mode 
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy     # Only needed if running in EKS Auto Mode 


  # This role is assumed by the worker nodes in our cluster
  EKSNodeRole:
    Type: AWS::IAM::Role
    Condition:  CreateNodeGroupCondition
    Properties:
      RoleName: !Sub ${AWS::StackName}-EKSNodeRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore   # Added for Karpenter

  # The EKS Cluster itself, a bit of an anticlimax.  
  # The cluster will run in the subnets you specified above.
  # Can take up to 10 minutes for AWS to provision this, and it costs $.20 per hour.
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig: 
        SubnetIds: !Ref SubnetIds

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Condition:  CreateNodeGroupCondition
    Properties: 
      AmiType: AL2_x86_64
      ClusterName: !Ref Cluster
      NodegroupName: !Sub ${AWS::StackName}-NodeGroup
      NodeRole: !GetAtt  EKSNodeRole.Arn
      ScalingConfig: 
        MinSize:     !Select [0,  !Split [ ":", !Ref ClusterSize ]]
        DesiredSize: !Select [1,  !Split [ ":", !Ref ClusterSize ]]
        MaxSize:     !Select [2,  !Split [ ":", !Ref ClusterSize ]]
      Subnets: !Ref SubnetIds

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition:  CreateBastionHostCondition
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-Template
      LaunchTemplateData: 
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}"  # Obtain the AMI from the SSM Parameter
        InstanceType: t3.small             
        IamInstanceProfile: 
          Name: !Ref BastionInstanceProfile      # Allows EC2 Instance to talk with SSM
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Select [ 0, !Ref SubnetIds ]   # You have to specify a subnet in this launch template, but this will be ignored when using ASG.
          Groups: [!GetAtt Cluster.ClusterSecurityGroupId ]       # Same security group used by cluster nodes and API server allows seamless intercommunication.
        InstanceMarketOptions: 
          MarketType: spot
        BlockDeviceMappings: 
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
        MetadataOptions:
          HttpTokens: optional  # Allow IMDSv1 or IMDSv2
        UserData:      #  Install eksctl, kubectl, helm, etc..:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install git -y

            # Get current region from instance metadata and set the CLI to use it. It cannot do this automatically:
            TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            REGION=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')
            aws configure set region $REGION
            echo current region is set to `aws configure get region`

            # eksctl
            echo Installing eksctl
            curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version

            # Kubectl
            echo Installing Kubectl
            curl --silent -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.32.0/2024-12-20/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            kubectl version --short --client

            # Configure Kubectl so it can be used by all users:
            mkdir -p /etc/kube
            aws eks update-kubeconfig --name ${AWS::StackName} --alias admin --kubeconfig /etc/kube/config
            # Make it readable by all users
            chmod 644 /etc/kube/config
            # Set KUBECONFIG globally for all interactive users, and clone some useful demos
            cat << 'EOF' > /etc/profile.d/kubeconfig.sh
            export KUBECONFIG=/etc/kube/config
            alias k="kubectl"
            if [ ! -d "${!HOME}/git/k8s-teaching-demos" ]; then
              mkdir -p "${!HOME}/git"
              git clone ${RepositoryUrl} "${!HOME}/git"
            fi
            EOF
            chmod +x /etc/profile.d/kubeconfig.sh
            # Ensure ~/.kube/config is a symlink for future users
            mkdir -p /etc/skel/.kube
            ln -sf /etc/kube/config /etc/skel/.kube/config

            # Helm
            echo Installing Helm
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash


  EC2Instance:
    Type: AWS::EC2::Instance
    Condition:  CreateBastionHostCondition
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate 
        Version: !GetAtt LaunchTemplate.LatestVersionNumber  
      Tags:
      - Key: Name
        Value: EKS Bastion

  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition:  CreateBastionHostCondition
    Properties:
      Path: /
      Roles: [ !Ref BastionRole]

  Cloud9: 
    Type: AWS::Cloud9::EnvironmentEC2 
    Condition:  CreateCloud9Condition
    Properties: 
      Name: !Sub ${AWS::StackName} 
      InstanceType: t3.small 
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      AutomaticStopTimeMinutes: 60
      SubnetId: !Select [ 0, !Ref SubnetIds ] 
      Repositories: 
        - PathComponent: /git
          RepositoryUrl: !Ref RepositoryUrl

Outputs:

  Cloud9Console:
    Condition:  CreateCloud9Condition  
    Description: Click here to go to the Cloud9 console
    Value: !Sub https://us-west-2.console.aws.amazon.com/cloud9/ide/${Cloud9}

  SessionManagerLink:
    Condition: CreateBastionHostCondition
    Description: Access bastion host via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EC2Instance}?region=${AWS::Region}#  

  EKSClusterConsole:
    Description: AWS management console screen where you can look at your cluster
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/eks/home?region=${AWS::Region}#/clusters/${Cluster}

  # This makes the output bulky 
  # CertificateAuthorityData:
  #   Description: The certificate-authority-data for your cluster.
  #   Value: !GetAtt  Cluster.CertificateAuthorityData

  EKSEndpoint:
    Description: The endpoint for your Kubernetes API server.
    Value: !GetAtt  Cluster.Endpoint

  EKSNodeRole:
    Description: Role applied to the EKS Nodes.  Used when running kubectl apply -f aws-auth-cm.yaml
    Value: !GetAtt EKSNodeRole.Arn
