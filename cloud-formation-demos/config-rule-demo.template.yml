AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'

# 

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  EmailAddress:
    Description: Eamail address to send remediation messages to.  Alerts will be sent whenever a resource is found to be non-compliant.
    Type: String
    Default: xxxxxx@gmail.com

  AutomaticallyBuildOptions:
    Type: String
    AllowedValues: 
    - 1. Manually build ConfigRule and remediation yourself
    - 2. Automatically build ConfigRule
    - 3. Automatically build ConfigRule + eMail Remediation
    - 4. Automatically build ConfigRule + Remediate by Fixing the SG
    Default: 4. Automatically build ConfigRule + Remediate by Fixing the SG
    Description: Do you want CloudFormation to create the ConfigRule or Remediation strategies for you?  Faster to demo when built, better walkthrough when you do it yourself.
    
Conditions:
  CreateConfigRuleCondition:          !Not [ !Equals [ !Ref AutomaticallyBuildOptions, "1. Manually build ConfigRule and remediation yourself" ] ]
  CreateConfigRuleRemediationEmailCondition: !Equals [ !Ref AutomaticallyBuildOptions, "3. Automatically build ConfigRule + eMail Remediation" ] 
  CreateConfigRuleRemediationFixSGCondition: !Equals [ !Ref AutomaticallyBuildOptions, "4. Automatically build ConfigRule + Remediate by Fixing the SG" ] 

Resources:

  # Sample of a Security Group with a risky inbound port open:
  RiskySecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Risky Security Group 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RiskySecurityGroup
      - Key: Purpose
        Value: Demo
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  RiskySecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Risky Security Group 
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RiskySecurityGroup
      - Key: Purpose
        Value: Demo
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3389
        ToPort: 3389
        CidrIp: 0.0.0.0/0

  # This Lambda function does some work.
  CheckSGsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CheckSecurityGroups
      Description: Function which checks our security groups for unauthorized ports
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: python3.12
      MemorySize: 128
      Timeout: 3
      InlineCode: !Sub |
        import boto3
        import botocore
        import json

        # This logic only applies to these kinds of resources:
        APPLICABLE_RESOURCES = ["AWS::EC2::SecurityGroup"]

        ALLOWABLE_PERMISSIONS = [
        {
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "UserIdGroupPairs" : [],
            "IpRanges" : [{"CidrIp" : "0.0.0.0/0"}],
            "PrefixListIds" : [],
            "Ipv6Ranges" : []
        },
        {
            "IpProtocol" : "tcp",
            "FromPort" : 443,
            "ToPort" : 443,
            "UserIdGroupPairs" : [],
            "IpRanges" : [{"CidrIp" : "0.0.0.0/0"}],
            "PrefixListIds" : [],
            "Ipv6Ranges" : []
        }]
        def evaluate_compliance(configuration_item):
            # For resources other than the ones we handle, return:
            if configuration_item["resourceType"] not in APPLICABLE_RESOURCES:
                return {
                    "compliance_type" : "NOT_APPLICABLE",
                    "annotation" : "Rule doesn't apply to resources of type " + configuration_item["resourceType"] + "."
                }
                
            # If this was a delete, return:    
            if configuration_item["configurationItemStatus"] == "ResourceDeleted":
                return {
                    "compliance_type": "NOT_APPLICABLE",
                    "annotation": "The configurationItem was deleted and therefore cannot be validated."
                }

            group_id = configuration_item["configuration"]["groupId"]
            client = boto3.client("ec2");
                
            # Describe the Security Group:
            try:
                response = client.describe_security_groups(GroupIds=[group_id])
            except botocore.exceptions.ClientError as e:
                return {
                    "compliance_type" : "NON_COMPLIANT",
                    "annotation" : "describe_security_groups failure on group " + group_id
                }    

            # Read the rules of the security group:        
            ip_permissions = response["SecurityGroups"][0]["IpPermissions"]
            unauthorized_permissions = [item for item in ip_permissions if item not in ALLOWABLE_PERMISSIONS ]
            
            # If we detected unauthorized permissions:
            if unauthorized_permissions:
                print('Found unauthorized security group rules on security group' + group_id)
                return {
                    "compliance_type" : "NON_COMPLIANT",
                    "annotation" : "authorize_security_group_ingress failure on group " + group_id
                }

            print('Security Group {} had no unauthorized ingress rules'.format(group_id))
            return {
                "compliance_type" : "COMPLIANT",
                "annotation" : "authorize_security_group_ingress passed on group " + group_id
            }
                

        def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            config_item = invoking_event["configurationItem"]

            evaluation = evaluate_compliance(config_item)

            # Post findings to AWS Config:
            config = boto3.client('config')
            response = config.put_evaluations(
                Evaluations=[
                    {
                      'ComplianceResourceType': config_item['resourceType'],
                      'ComplianceResourceId': config_item['resourceId'],
                      'ComplianceType': evaluation["compliance_type"],
                      "Annotation": evaluation["annotation"],
                      'OrderingTimestamp': config_item['configurationItemCaptureTime']
                  },
              ],
              ResultToken=event['resultToken'])



  # This Role allows the Lambda function to make API calls if needed.
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-LambdaFunctionRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  LambdaFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-LambdaFunctionPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - config:PutEvaluations
            - ec2:DescribeSecurityGroups
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:RevokeSecurityGroupIngress            
          Resource: "*"
      Roles: 
        -  !Ref LambdaFunctionRole   

  # The Lambda may be called by AWS Config.
  ConfigPermissionToCallLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt CheckSGsLambda.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com

  # This Role allows the SSM to send an email
  SsmSendNotificationRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-SsmSendNotificationRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: allowpublish
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: 
                - sns:Publish*
              Resource: "*"

  # This Role allows the SSM to send an email
  BlockSecurityGroupRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-BlockSecurityGroupRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: allowpublish
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: 
                - ec2:*
              Resource: "*"


  # Config rule Checks all resources tagged as Purpose=Demo via the supplied Lambda.
  TheConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigPermissionToCallLambda
    Condition:  CreateConfigRuleCondition
    Properties: 
      ConfigRuleName: !Sub ${AWS::StackName}-CheckSecurityGroups
      Description: Check to make sure security groups match our overall rules.
      Scope: 
        # ComplianceResourceTypes: 
        #   - AWS::EC2::SecurityGroup   # Look only at security groups
        TagKey: Purpose
        TagValue: Demo
      Source: 
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt CheckSGsLambda.Arn
        SourceDetails: 
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification

  # Topic to send email alerts to:
  RemediationSnsTopic:
    Type: AWS::SNS::Topic
    Condition:  CreateConfigRuleRemediationEmailCondition
    Properties: 
      DisplayName: SecurityGroup not compliant! 
      TopicName: NonCompliantSecurityGroup
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email

  #arn:aws:iam::011673140073:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM
  RemediationEmail:
    Type: AWS::Config::RemediationConfiguration
    Condition:  CreateConfigRuleRemediationEmailCondition
    Properties: 
      ConfigRuleName: !Ref TheConfigRule
      TargetId: AWS-PublishSNSNotification
      TargetType: SSM_DOCUMENT    # Required, and only value allowed
      Automatic: true
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60
      ExecutionControls:
        SsmControls:
          ConcurrentExecutionRatePercentage: 50
      Parameters: 
        AutomationAssumeRole:
          StaticValue:
            Values: 
            - !GetAtt SsmSendNotificationRole.Arn
        TopicArn:
          StaticValue:
            Values:
            - !Ref RemediationSnsTopic
        Message:
          ResourceValue:
            Value: RESOURCE_ID


  # This remediation rule calls the existing AWS-DisablePublicAccessForSecurityGroup
  # 
  RemediationFixSG:
    Type: AWS::Config::RemediationConfiguration
    Condition:  CreateConfigRuleRemediationFixSGCondition
    Properties: 
      ConfigRuleName: !Ref TheConfigRule
      TargetId: AWS-DisablePublicAccessForSecurityGroup
      TargetType: SSM_DOCUMENT    # Required, and only value allowed
      Automatic: true
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60
      ExecutionControls:
        SsmControls:
          ConcurrentExecutionRatePercentage: 50
      Parameters: 
        AutomationAssumeRole:
          StaticValue:
            Values: 
            - !GetAtt BlockSecurityGroupRole.Arn
        IpAddressToBlock:
          StaticValue:
            Values:
            - 10.0.0.0/0
        GroupId:
          ResourceValue:
            Value: RESOURCE_ID


  # Explicitly creating LogGroups allows us to clean up these on stack delete.
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CheckSGsLambda}
      RetentionInDays: 3

Outputs:
  ConfigRule:
    Description: The ConfigRule page in the AWS console.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/config/home?region=${AWS::Region}#/rules/rule-details/${AWS::StackName}-CheckSecurityGroups

  LambdaArn:
    Description:  Arn of the Lambda used by the Config Rule to detect bad security GroupDescription
    Value: !GetAtt CheckSGsLambda.Arn