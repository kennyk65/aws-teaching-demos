AWSTemplateFormatVersion: 2010-09-09

# Demonstrates running a fleet of on-demand / spot instances using a standard ASG. 

Metadata:  
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId
          - PublicSubnetIds

Parameters:
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 1-2 public, internet-facing subnets in your selected VPC

Resources:



  # Security Group for the instances.  Allow inbound ports for the ELB to use:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EcsSecurityGroup
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  #  Inbound rules for HTTP on 80.  
  SecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0     # This is pretty wide open.  
 
  # This LogsGroup will be useful when several containers emit output:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-ECSLogGroup
      RetentionInDays: 3


  # Auto-Scaling Group for the cluser:
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIds
      MixedInstancesPolicy:
        InstancesDistribution: 
          OnDemandAllocationStrategy: prioritized  # prioritized is the only possible value and the default
          OnDemandBaseCapacity: 0 # Default value is 0
          OnDemandPercentageAboveBaseCapacity: 30 # Percentage number between 1 and 100 
          SpotAllocationStrategy: lowest-price    # the only value and default.  Unfortunately no "spread" option.
          SpotInstancePools: 4                    # See the "Overrides" section below? this says to use all 4 of the possible overrides for instance type. 
          #SpotMaxPrice: # Default is max price
        LaunchTemplate: 
          LaunchTemplateSpecification: 
            LaunchTemplateId: !Ref LaunchTemplate
            Version: 1
          Overrides:    # These instances types will be used INSTEAD OF what our template says.
            - InstanceType: t2.nano
            - InstanceType: t2.micro
            - InstanceType: t3.micro
            - InstanceType: t3.small        
      MinSize: 1
      MaxSize: 14
      DesiredCapacity: 10
      Cooldown: 60  # Make the scaling activity a bit more snappy.
 #     TargetGroupARNs:  [ !Ref ALBTargetGroup ]    # Temporarily disconnected, no need for real ELB right now.
      Tags:
      - Key: Name
        Value: Cluster Instance
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M     # 5 minutes

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData: 
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
        SecurityGroupIds:  [!Ref SecurityGroup]
    #    InstanceType: t2.micro     # Ordinarily we'd specify instance type in the launch template, but our ASG's mixed instance policy will override it anyway.
        # InstanceInitiatedShutdownBehavior: String
        # DisableApiTermination: Boolean

        # Not allowed to use instance market options with
        # InstanceMarketOptions: 
        #   MarketType: spot
        #   SpotOptions: 
        #     SpotInstanceType: one-time # or persistent.  Can only be "one-time" when used with ASG.
        #     #InstanceInterruptionBehavior: # terminate, hibernate, or stop.  Default is terminate.  hibernate requires agent install.
        #     # MaxPrice: # Allow default to on-demand price
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install java-1.8.0 -y
            wget https://s3-us-west-2.amazonaws.com/kk-uploads-oregon/spring-cloud-aws-environment-demo-1.war
            /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}
            java -jar spring-cloud-aws-environment-demo-1.war --server.port=80

