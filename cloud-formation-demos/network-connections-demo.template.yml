AWSTemplateFormatVersion: '2010-09-09'
#  This template illustrates three separate ways to connect two VPCs,
#  VPC Peering, Transit Gateway, and VPC (Interface) Endpoints.
#  It launches EC2 instances in the source and destination VPCs to
#  make the connectivity easier to demonstrate.  It also provides a 
#  quick link to the network reachability page in the management console 
#  to graphically show the network components.
#
#  To demonstrate VPC peering, create the stack with option 1.  Find the 
#  private IP address of the destination instance in the stack output.  Use
#  the session manager link to connect to the source instance.  Ping the
#  destination instance like this:   ping -c 6 <IP-ADDRESS>
#
#  To demonstrate Transit Gateway, create the stack with option 2.  Follow the
#  same demo ideas for peering.
#
#  To demonstrate VPC Endpoints / Private Link, create the stack with option 3.
#  The destination instance hosts a small web service (Python/Flask in a Docker container)
#  Which can be called via the VPC Endpoint's DNS name.  Copy it from stack
#  output and call the web service like this:  http://<DNSNAME>/api?value=2 .
#  
#  Optional: For any of these options, use the link in stack output to open
#  VPC / Network Manager / Reachability Analyzer.  Enter source as consumer 
#  instance, target as provider instance.


Parameters:

  VPCConnectionType:
    Type: String
    AllowedValues: 
    - 1. Use VPC Peering
    - 2. Use Transit Gateway
    - 3. Use Endpoint
    Default: 1. Use VPC Peering
    Description: How would you like to connect the two VPCs?

  DockerImage:
    Type: String
    Default: public.ecr.aws/kkrueger/flask-api:1
    Description: Image to use for a container.  Can be from DockerHub or include registry URL for a different source (repository-url/image:tag). 

  AmazonLinuxAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI using the Parameter Store...

Conditions:
  UsePeeringCondition:          !Equals [ !Ref VPCConnectionType, "1. Use VPC Peering" ]
  UseTransitGatewayCondition:   !Equals [ !Ref VPCConnectionType, "2. Use Transit Gateway" ]
  UseEndpointCondition:         !Equals [ !Ref VPCConnectionType, "3. Use Endpoint" ]

Resources:

  #  Destination network:
  DestinationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Destination VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DestinationIGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DestinationVPC
      InternetGatewayId: !Ref InternetGateway

  DestinationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DestinationVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Destination Subnet

  DestinationRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DestinationVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Destination Route table

  DestinationRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DestinationRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DestinationRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DestinationRouteTable
      SubnetId: !Ref DestinationSubnet

  DestinationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-DestinationSecurityGroup
      GroupDescription: DestinationSecurityGroup
      VpcId: !Ref DestinationVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DestinationSecurityGroup

  DestinationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMI        # Latest Amazon Linux 2
      InstanceType: t2.micro
      SubnetId: !Ref DestinationSubnet
      SecurityGroupIds:
      - !Ref DestinationSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Destination Instance
      UserData:                           # Starts a simple web app on port 80
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          docker pull ${DockerImage}
          docker run -d -p80:5000 ${DockerImage}   


  # This is the Source network
  SourceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Source VPC 

  SourceInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-SourceIGW
  SourceInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SourceVPC
      InternetGatewayId: !Ref SourceInternetGateway

  SourceSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SourceVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      CidrBlock: 172.16.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Source Subnet

  SourceRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SourceVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Source Route Table

  SourceRoute:
    Type: AWS::EC2::Route
    DependsOn: SourceInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref SourceRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SourceInternetGateway

  SourceRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SourceRouteTable
      SubnetId: !Ref SourceSubnet

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-SourceSecurityGroup
      GroupDescription: SourceSecurityGroup
      VpcId: !Ref SourceVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 172.16.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-SourceSecurityGroup

  SourceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMI                # Latest Amazon Linux 2
      InstanceType: t2.micro
      SubnetId: !Ref SourceSubnet
      IamInstanceProfile: !Ref SSMInstanceProfile     # Allows EC2 Instance to talk with SSM
      SecurityGroupIds:
      - !Ref SourceSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Source Instance

  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SSMRole]

  # Allow EC2 instance to make calls to SSM, including session manager.
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  # PEERING STARTS HERE!!
  PeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition:  UsePeeringCondition
    Properties: 
      PeerVpcId: !Ref DestinationVPC
      VpcId: !Ref SourceVPC

  DestinationPeerRoute:
    Type: AWS::EC2::Route
    Condition:  UsePeeringCondition
    Properties:
      RouteTableId: !Ref DestinationRouteTable
      DestinationCidrBlock: 172.16.0.0/16
      VpcPeeringConnectionId: !Ref PeeringConnection

  SourcePeerRoute:
    Type: AWS::EC2::Route
    Condition:  UsePeeringCondition
    Properties:
      RouteTableId: !Ref SourceRouteTable
      DestinationCidrBlock: 10.0.0.0/16
      VpcPeeringConnectionId: !Ref PeeringConnection

  # TRANSIT GATEWAY STARTS HERE
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Condition: UseTransitGatewayCondition
    Properties: 
      AutoAcceptSharedAttachments: enable   # Hoping this makes attaching VPCs easier

  SourceTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Condition: UseTransitGatewayCondition
    Properties: 
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref SourceVPC
      SubnetIds: 
      - !Ref SourceSubnet

  DestinationTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Condition: UseTransitGatewayCondition
    Properties: 
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref DestinationVPC
      SubnetIds: 
      - !Ref DestinationSubnet

  SourceTransitGatewayRoute: 
    Type: AWS::EC2::Route
    Condition: UseTransitGatewayCondition
    DependsOn: SourceTransitGatewayAttachment
    Properties: 
      RouteTableId: !Ref SourceRouteTable
      DestinationCidrBlock: 10.0.0.0/16
      TransitGatewayId: !Ref TransitGateway

  DestinationTransitGatewayRoute: 
    Type: AWS::EC2::Route
    Condition: UseTransitGatewayCondition
    DependsOn: DestinationTransitGatewayAttachment
    Properties: 
      RouteTableId: !Ref DestinationRouteTable
      DestinationCidrBlock: 172.16.0.0/16
      TransitGatewayId: !Ref TransitGateway

  # PRIVATE LINK STARTS HERE!!
  # This is the Private Link VPC Endpoint Service.  This endpoint will be avalilable outside the Provider VPC to those who need to consume it.
  SourceEndPointService:
    Type: AWS::EC2::VPCEndpointService
    Condition:  UseEndpointCondition
    Properties:
      NetworkLoadBalancerArns:
      - !Ref NetworkLoadBalancer
      AcceptanceRequired: false

  # This is the Source endpoint.  It resides in the source VPC/Subnets and sends traffic to the destination VPC Endpoint.
  SourceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition:  UseEndpointCondition
    Properties:
      VpcId: !Ref SourceVPC
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.vpce.${AWS::Region}.${SourceEndPointService}
      SubnetIds:
      - !Ref SourceSubnet
      SecurityGroupIds:
      - !Ref SourceSecurityGroup

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition:  UseEndpointCondition
    Properties:
      Name: NetworkLoadBalancer
      Scheme: internal
      Subnets:
      - !Ref DestinationSubnet
      Tags:
      - Key: Name
        Value: NetworkLoadBalancer
      Type: network

  DestinationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition:  UseEndpointCondition
    Properties:
      Name: ProviderTargetGroup
      Port: 80
      Protocol: TCP
      VpcId: !Ref DestinationVPC
      TargetType: instance
      Targets:
      - Id: !Ref DestinationInstance
        Port: 80

  DestinationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition:  UseEndpointCondition
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DestinationTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP


Outputs:

  SourceSessionManagerLink:
    Description: Access the service SOURCE using web browser.  
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${SourceInstance}?region=${AWS::Region}#  

  DestinationPrivateIpAddress:
    Description:  Private IP address of the destination EC2 instance.  Should be pingable from source instance when using Peering or Transit Gateway.
    Value: !GetAtt  DestinationInstance.PrivateIp

  ReachabilityAnalyzerLink:
    Description:  Convenient link to the Network Manager Reachability Analyzer.  Enter 'Source' instance as source and 'Destination' instance as target
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/networkinsights/home?region=${AWS::Region}#CreateNetworkPath

  DnsName:
    Description: DNS Name of the VPC Endpoint.  
    Condition:  UseEndpointCondition
    Value: !Select [1, !Split [ ':', !Select [ 0, !GetAtt SourceEndpoint.DnsEntries ]]]
