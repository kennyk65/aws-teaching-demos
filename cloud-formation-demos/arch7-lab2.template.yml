AWSTemplateFormatVersion: 2010-09-09

# Lab 2
# This template creates a (nearly) identical environment to what students produce manually in AWS Arch lab 2.
# The main difference is the IAM Role
# It also creates two additional subnets that will be needed later.

Resources:

  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Lab IGW 
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # A NAT Gateway.  
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC


  # Now some subnets, 1 public and 1 private:
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/23
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet 

        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table
  PrivateRoute:            # Private route table can access web via NAT 
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable


  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows incoming traffic to public instance
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows incoming traffic to private instance using public security group
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref PublicSecurityGroup


  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
      InstanceType: t3.micro                        # Any instance type will do
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: true                  # We will need a public IP address
        SubnetId: !Ref PublicSubnet                         # We should sit in a public subnet.
        GroupSet: [!Ref PublicSecurityGroup]                                 # Attach the security group
      Tags:
      - Key: Name
        Value: Public Instance
      UserData:      #  What to run:
        Fn::Base64: |
          #!/bin/bash
          # To connect to your EC2 instance and install the Apache web server with PHP
          yum update -y &&
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 &&
          yum install -y httpd &&
          systemctl enable httpd.service
          systemctl start httpd
          cd /var/www/html
          wget  https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-200-ARCHIT/v7.0.0/lab-2-VPC/scripts/instanceData.zip
          unzip instanceData.zip


  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]


  # EC2 instance will need to talk to SSM to read parameters:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2-SSM-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
      InstanceType: t3.micro                        # Any instance type will do
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: false                  # We will need a public IP address
        SubnetId: !Ref PrivateSubnet                         # We should sit in a public subnet.
        GroupSet: [!Ref PrivateSecurityGroup]                     # Attach the security group
      Tags:
      - Key: Name
        Value: Private Instance

  # The following resources are only required for later labs:
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 2 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet 2
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable



Outputs:
  PublicInstanceIP:
    Description: The Public IP address for the public EC2 instance.
    Value: !Sub http://${PublicInstance.PublicIp}

  PrivateInstanceIP:
    Description: The Private IP address for the private EC2 instance.
    Value: !Sub http://${PrivateInstance.PrivateIp}

  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}:VPC

  PublicSubnet:
    Description: Public Subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${AWS::StackName}:PublicSubnet

  PrivateSubnet:
    Description: Private Subnet
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnet

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}:PrivateSubnet2

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}:PublicSubnet2

  PublicInstance:
    Description: The EC2 instance ID of the public EC2 instance.
    Value: !Ref PublicInstance
    Export:
      Name: !Sub ${AWS::StackName}:PublicInstance

  PublicSecurityGroup:
    Description: The security group for web instances.
    Value: !Ref PublicSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}:PublicSecurityGroup

  EC2InstanceProfile:
    Description: The Instance profile used for SSM Agent on EC2 instances.
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub ${AWS::StackName}:EC2InstanceProfile

  PublicInstanceSessionManagerLink:
    Description: Access instance via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${PublicInstance}?region=${AWS::Region}#  

