AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# Implement Lab 6 of AWS Dev 3
# Warning: This code can presently only run in us-east-1, since that is where the (default) code bucket is.
# Note that custom resource python code is creating the test user (student) and populating the web bucket.

Parameters:
  FirstDashLastName:
    Type: String
    Default: ken-krueger
    Description: Your first name, a dash, and last name.  This will be used to name some S3 buckets.

  CodeUriBucket: 
    Type: String
    Default: kk-courses
    Description: S3 bucket in which you have placed the Lambda function code (zip file)

  CodeUriKey: 
    Type: String
    Default: aws-dev-3/PollyNotes-JavaSolutionFunctions.zip
    Description: object key inside your S3 bucket where your code is located.

  WebSourceCodeUrl:
    Type: String
    # Latest code results in infinite flipping between home and login page
    # Default:  https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-200-DODEVA/v3.4.0/lab-6-end-to-end-app/scripts/polly-notes-web-bucket-root.zip
    Default:  https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-DODEVA/v3.1.0/lab-7-end-to-end-app/scripts/polly-notes-web-bucket-root.zip
    Description:  Download location of the web source code.

Globals:  # This section defines settings that we don't want to repeat over and over in each Lambda.
  Function:
    MemorySize: 1024
    Timeout: 8
    Runtime: java17
    CodeUri: 
      Bucket: !Ref CodeUriBucket
      Key: !Ref CodeUriKey


Resources:

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-PollyNotesPool
      Policies:
        PasswordPolicy:     # Since this is a demo, make relaxed password requirements.
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false      
        # 'STANDARD ATTRIBUTEs' like email are unchecked by default
      
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: PollyNotesAngular
      GenerateSecret: false       
      UserPoolId: !Ref CognitoUserPool

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: pollynotes   # Unfortunately, the table name is hard-coded in the Lambda functions.
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: noteId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: noteId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  S3WebBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub polly-notes-web-${FirstDashLastName}
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        BlockPublicPolicy: false

  S3MP3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub polly-notes-mp3-${FirstDashLastName}
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        BlockPublicPolicy: false
      CorsConfiguration:
        CorsRules: 
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
          AllowedOrigins:
            - "*"

  S3BucketPolicyWeb:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3WebBucket
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
          - s3:GetObject
          Resource: !Sub ${S3WebBucket.Arn}/*
          Principal: "*"

  S3BucketPolicyMp3:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3MP3Bucket
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
          - s3:GetObject
          Resource: !Sub ${S3MP3Bucket.Arn}/*
          Principal: "*"

  # This Role allows the Lambda function to make API calls if needed.
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-lambda_ddb_s3_polly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the LambdaFunctionRole.
  #  permissions for CloudWatch Logs, dynamodb, s3.
  LambdaFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-lambda_ddb_s3_polly
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:DescribeTable
          - polly:SynthesizeSpeech
          - s3:PutObject
          - s3:GetObject
          Resource: "*"
      Roles: 
      -  !Ref LambdaFunctionRole

  TheApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:   # THIS IS ALL SWAGGER:
        securityDefinitions:
          PollyNotesPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
              # TODO 1: Replace with your Cognito User Pool ARN (in between the quotes "")
              - !GetAtt  CognitoUserPool.Arn
              type: cognito_user_pools
        swagger: "2.0"
        info:
          title: PollyNotesAPI
        paths:
          /notes:
            get:
              consumes: [ application/json ]
              produces: [ application/json ]
              parameters:
              - name: text
                in: query
                required: false
                type: string
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - PollyNotesPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "{  \"userId\": \"$context.authorizer.claims.sub\" }"
                contentHandling: CONVERT_TO_TEXT
                type: aws
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ListLambda.Arn}/invocations
            post:
              consumes: [ application/json ]
              produces: [ application/json ]
              parameters:
              - in: body
                name: NoteCreateModel
                required: true
                schema:
                  $ref: "#/definitions/NoteCreateModel"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - PollyNotesPool: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "{\r\n\
                    \"userId\": \"$context.authorizer.claims.sub\",\r\n\
                    \"noteId\": $input.json('$.noteId'),\r\n\
                    \"note\": $input.json('$.note')\r\n
                    }"
                contentHandling: CONVERT_TO_TEXT
                type: aws
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${CreateUpdateLambda.Arn}/invocations
            options:
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /notes/search:
            get:
              consumes: [ application/json ]
              produces: [ application/json ]
              parameters:
              - name: text
                in: query
                required: false
                type: string
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - PollyNotesPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "{\r\n\
                    \"userId\": \"$context.authorizer.claims.sub\",\r\n\
                    \"noteId\": \"$input.params('id')\"\r\n\
                    }"
                contentHandling: CONVERT_TO_TEXT
                type: aws
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${SearchLambda.Arn}/invocations
            options:
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /notes/{id}:
            post:
              consumes: [ application/json ]
              produces: [ application/json ]
              parameters:
              - name: id
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - PollyNotesPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "{\r\n
                    \"voiceId\": $input.json('$.voice'),\r\n \
                    \"note\": {\r\n \
                    \"userId\": \"$context.authorizer.claims.sub\",\r\n \ 
                    \"noteId\": \"$input.params('id')\"\r\n \
                    }\r\n \
                    }"
                contentHandling: CONVERT_TO_TEXT
                type: aws
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DictateLambda.Arn}/invocations
            delete:
              consumes: [ application/json ]
              produces: [ application/json ]
              parameters:
              - name: id
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - PollyNotesPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: "{\r\n\
                    \"userId\": \"$context.authorizer.claims.sub\",\r\n\
                    \"noteId\": \"$input.params('id')\"\r\n\
                    }"
                contentHandling: CONVERT_TO_TEXT
                type: aws
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${DeleteLambda.Arn}/invocations
            options:
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        definitions:
          Empty:
            type: object
            title: "Empty Schema"
          NoteCreateModel:
            type: "object"
            required:
            - "note"
            properties:
              note:
                type: string
              noteId:
                type: string
            title: "Note Create Model"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true


  # GET on /notes calls the PollyNotes-ListFunction
  ListLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotes-ListFunction
      Description: PollyNotes-ListFunction
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: com.amazonaws.pollynotes.solution.ListFunctionSolution

  # POST on /notes calls the PollyNotes-CreateUpdateFunction
  CreateUpdateLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotes-CreateUpdateFunction
      Description: PollyNotes-CreateUpdateFunction
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: com.amazonaws.pollynotes.solution.CreateUpdateFunctionSolution

  # GET on /notes/search calls the PollyNotes-SearchFunction
  SearchLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotes-SearchFunction
      Description: PollyNotes-SearchFunction
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: com.amazonaws.pollynotes.solution.SearchFunctionSolution

  # DELETE on /notes/{id} calls the PollyNotes-DeleteFunction
  DeleteLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotes-DeleteFunction
      Description: PollyNotes-DeleteFunction
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: com.amazonaws.pollynotes.solution.DeleteFunctionSolution
            
  # POST on /notes/{id} calls the PollyNotes-DictateFunction
  DictateLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotes-DictateFunction
      Description: PollyNotes-DictateFunction
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: com.amazonaws.pollynotes.functions.DictateFunction
      Timeout: 14
      Environment:
        Variables:
          MP3_BUCKET_NAME: !Ref S3MP3Bucket

  # Permission to invoke Lambda function from API Gateway:
  LambdaInvokePermissionList:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ListLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaInvokePermissionCreateUpdate:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CreateUpdateLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaInvokePermissionSearch:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SearchLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaInvokePermissionDelete:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeleteLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaInvokePermissionDictate:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DictateLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com


  # This function will take care of some miscellaneous lab work for us, like setting up the test user
  CustomResourceTestUserLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotesTestUserCustomResource
      Description: Sets up the test user for lab 6.
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import cfnresponse
          import boto3

          print('Loading function')
          cognito = boto3.client('cognito-idp')

          # Entry point:
          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData = {}

              # Get the CloudFormation request type
              requestType = event['RequestType']
              cognitoUserPoolId = event['ResourceProperties']['CognitoUserPoolId']
              cognitoClientId = event['ResourceProperties']['CognitoClientId']

              if requestType == 'Create':
                  try:
                      #  Create a test user in our Cognito user pool and confirm it
                      cognito.sign_up(
                          ClientId=cognitoClientId, Username='student', Password='student'
                      )            
                      print("Created user.")
                      cognito.admin_confirm_sign_up(
                          UserPoolId=cognitoUserPoolId, Username='student'
                      )            
                      print("User confirmed.")
                  except Exception as e:
                      msg = 'Error creating / confirming user.  Exception is {}'.format(repr(e))
                      print(msg)
                      responseData['Reason'] = msg
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)


      MemorySize: 128     
      Timeout: 5         # Usually runs in less than one second.
      Runtime: python3.11
      Handler: index.lambda_handler


  # This function will setup the web content in our S3 web bucket
  CustomResourceWebContentLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-PollyNotesWebContentCustomResource
      Description: Handles miscellaneous tasks associated with lab 6.
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        ZipFile: !Sub |
          import json
          import cfnresponse
          import boto3
          from zipfile import ZipFile 
          import string
          import os
          import mimetypes
          import urllib.request

          print('Loading function')
          s3 = boto3.client('s3')

          # Entry point:
          def lambda_handler(event, context):
            print("Received event: " + json.dumps(event, indent=2))
            responseData = {}

            # Get the CloudFormation request type
            requestType = event['RequestType']
            rp = event['ResourceProperties']
            usrPool = rp['CognitoUserPoolId']
            clientId = rp['CognitoClientId']
            apiGatewayUrl = rp['ApiGatewayUrl']
            WebSourceCodeUrl = rp['WebSourceCodeUrl']
            destinationBucket = rp['DestinationBucket']

            if requestType == 'Create' or requestType == 'Update':
                print ('Downloading ' + WebSourceCodeUrl )
                zip_file_name = "" # "/tmp/web.zip"
                unzip_location =  "/tmp"
                try:
                    zip_file_name, headers = urllib.request.urlretrieve(WebSourceCodeUrl)          

                except Exception as e:
                    msg = 'Error downloading from {}. Check region.  Exception is {}.'.format(WebSourceCodeUrl,repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

                print ('Unzipping ' + zip_file_name )
                try:
                    with ZipFile(zip_file_name, 'r') as zip: 
                        zip.extractall(unzip_location) 
                except Exception as e:
                    msg = 'Error extracting {} to {}.  Exception is {}.'.format(zip_file_name,unzip_location,e)
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

                js_file_name = "/tmp/polly-notes-web-bucket-root/main.bundle.js"
                print('Altering contents of ' + js_file_name) 
                try:
                    data = ""
                    # Read the file contents into memory:
                    with open(js_file_name,'r') as f:
                      data = f.read()

                    # Search and replace:
                    data = data.replace("API_GATEWAY_INVOKE_URL = \"https://your-api-url\"","API_GATEWAY_INVOKE_URL = '" + apiGatewayUrl + "'")
                    data = data.replace("COGNITO_POOL_ID = 'us-east-1-xxxxxxxxxxx'","COGNITO_POOL_ID = '" + usrPool + "'" )
                    data = data.replace("COGNITO_APP_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'", "COGNITO_APP_CLIENT_ID = '" + clientId + "'" )

                    # Save
                    with open(js_file_name,'w') as f:
                      f.write(data)
                except Exception as e:
                    msg = 'Error altering {}.  Exception is {}.'.format(js_file_name,e)
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

                print ('Uploading ' + unzip_location + " to " + destinationBucket )
                try:
                    for root,dirs,files in os.walk(unzip_location):
                        for file in files:
                            mime_type = mimetypes.guess_type(file)[0]
                            if mime_type is None:
                              mime_type = "binary/octet-stream"
                            prefix = root.replace(unzip_location,"",1)
                            prefix = prefix.replace("/polly-notes-web-bucket-root/","")
                            prefix = prefix.replace("/polly-notes-web-bucket-root","")
                            if len(prefix) > 0:
                                prefix = prefix + '/'
                            print("uploading from {} to {}".format(os.path.join(root,file),prefix+file))
                            s3.upload_file(os.path.join(root,file),destinationBucket,prefix + file,ExtraArgs={'ContentType': mime_type})

                except Exception as e:
                    msg = 'Error uploading web content into bucket {}. Check region.  Exception is {}.'.format(destinationBucket,repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)


            # Unless something blew up, we should wander into this code:
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)


      MemorySize: 128     
      Timeout: 15         # Uploads and downloads take a bit of time.
      Runtime: python3.11
      Handler: index.lambda_handler


  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-PollyNotesCustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole


  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus Cognito.
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-PollyNotesCustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cognito-idp:*
            - s3:*
          Resource: "*"
      Roles: 
        -  !Ref CustomResourceRole   

  # This custom resource calls our Lambda function:
  HelperCustomResourceTestUserLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceTestUserLambda.Arn
      CognitoUserPoolId: !Ref CognitoUserPool
      CognitoClientId: !Ref CognitoUserPoolClient

  HelperCustomResourceWebContentLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceWebContentLambda.Arn
      CognitoUserPoolId: !Ref CognitoUserPool
      CognitoClientId: !Ref CognitoUserPoolClient
      ApiGatewayUrl: !Sub https://${TheApi}.execute-api.${AWS::Region}.amazonaws.com/prod
      DestinationBucket: !Ref S3WebBucket
      WebSourceCodeUrl: !Ref WebSourceCodeUrl

Outputs:

  CognitoUserPoolId:
    Description: Pool ID value which is needed when making API calls.  
    Value: !Ref CognitoUserPool

  CognitoUserPoolArn:
    Description: ARN of the user pool.
    Value: !GetAtt CognitoUserPool.Arn

  CognitoClientId:
    Description: Pool ID value which is needed when making API calls.  
    Value: !Ref CognitoUserPoolClient
    
  ApiGatewayProductionStageUrl:
    Description: The URL to use in your web code to point at the API gateway endpoint.  
    Value: !Sub https://${TheApi}.execute-api.${AWS::Region}.amazonaws.com/prod
    
  WebsiteUrl:
    Description:  Link to the website bucket.
    Value: !GetAtt S3WebBucket.WebsiteURL
