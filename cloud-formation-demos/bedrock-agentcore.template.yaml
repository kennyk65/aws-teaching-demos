AWSTemplateFormatVersion: "2010-09-09"
Description: "Minimal resources for AgentCore demo: Lambda tool + Gateway role + runtime role"

Parameters:
  MemoryRetentionDays:
    Type: Number
    Default: 1
    Description: "Memory event retention (not used directly in this template)"

Resources:
  # Create a Lambda function
  StockLookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-StockLookupFunction
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 2
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              agent = event['agent']
              actionGroup = event['actionGroup']
              function = event['function']
              parameters = event.get('parameters', [])

              # Execute your business logic here. For more information, refer to: https://docs.aws.amazon.com/bedrock/latest/userguide/agents-lambda.html
              stockPrice = 100 # Hard-coded example.
              
              responseBody =  {
                  "TEXT": {
                      "body": "The function {} was called successfully!  The stock price is {}.".format(function,stockPrice)
                  }
              }

              action_response = {
                  'actionGroup': actionGroup,
                  'function': function,
                  'functionResponse': {
                      'responseBody': responseBody
                  }
              }

              dummy_function_response = {'response': action_response, 'messageVersion': event['messageVersion']}
              print("Response: {}".format(dummy_function_response))
              return dummy_function_response              

  # Create an IAM Role for the Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Add a resource policy to the Lambda function allowing Bedrock to invoke it
  LambdaInvokePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StockLookupFunction
      Principal: bedrock.amazonaws.com




  AgentCoreGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-AgentCoreGatewayRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-GatewayInvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowInvokeSpecificLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt StockLookupFunction.Arn
              - Sid: AllowCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  AgentCoreRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-AgentCoreRuntimeRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock-agentcore.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AgentCoreRuntimePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBedrockInvoke
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: "*"
              - Sid: AllowAgentcoreControl
                Effect: Allow
                Action:
                  - bedrock-agentcore-control:CreateAgentRuntime
                  - bedrock-agentcore-control:InvokeAgentRuntime
                Resource: "*"
              - Sid: Logs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

Outputs:
  StockLookupLambdaArn:
    Description: "ARN of the stock lookup lambda"
    Value: !GetAtt StockLookupFunction.Arn
  AgentCoreGatewayRoleArn:
    Description: "ARN of the role to use when creating AgentCore Gateway (assume by AgentCore service)"
    Value: !GetAtt AgentCoreGatewayRole.Arn
  AgentCoreRuntimeRoleArn:
    Description: "ARN of the example AgentCore Runtime role (if you decide to create a runtime)"
    Value: !GetAtt AgentCoreRuntimeRole.Arn
