AWSTemplateFormatVersion: 2010-09-09

# This CloudFormation template sets up a demonstration of a BlueGreen deployment.
# It sets up two ElasticBeanstalk environments:
# The "blue" environment is associated with the "production" URL and is running the older 'v1-blue' version.
# The "greeb" environment is associated with the "staging" URL and is running the newer 'v2-green' version.
# Use ElasticBeanstalk's environment swap feature to do the 'deploy'

Parameters:

  PrefixProduction:
    Description: Unique prefix of the production environment
    Type: String
    Default: kk-production

  PrefixStaging:
    Description: Unique prefix of the staging environment
    Type: String
    Default: kk-staging

  S3Bucket:
    Description: Bucket containing the existing WAR files.  
    Type: String
    Default: kk-uploads-oregon

  S3ObjectBlue:
    Description: Object key (optional prefix) of the existing BLUE WAR file in the S3 bucket
    Type: String
    Default: zero-downtime-blue-17.war

  S3ObjectGreen:
    Description: Object key (optional prefix) of the existing GREEN WAR file in the S3 bucket
    Type: String
    Default: zero-downtime-green-17.war


Resources:

  # This Role is given to the ElasticBeanstalk environment:
  BeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-BeanstalkServiceRole   
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: elasticbeanstalk.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkServiceRole.
  BeanstalkServicePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: BeanstalkServicePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I'm not sure exactly what permissions are needed here.  Docs are nearly impossible.
          Action: 
            - elasticbeanstalk:*
            - elasticloadbalancing:Describe*
            - ec2:Describe*
            - ec2:Get*
            - ec2:Associate*
            - logs:*
            - s3:*
            - autoscaling:*   
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkServiceRole

  # This Role is given to the EC2 instance(s) run by ElasticBeanstalk:
  BeanstalkAppRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-BeanstalkInstanceRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkAppRole.
  BeanstalkAppPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: BeanstalkAppPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I'm not sure exactly what permissions are needed here.  Definitely cloudwatch logs.
          Action: 
            - logs:CreateLogStream
            - logs:GetLogEvents
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutRetentionPolicy
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkAppRole

  # Beanstalk starts here.
  MyBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: BlueGreenDemo

  BlueVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      Description: v1-blue
      SourceBundle:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3ObjectBlue

  GreenVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      Description: v2-green
      SourceBundle:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3ObjectGreen

  # How to run the code:
  BlueEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      VersionLabel: !Ref BlueVersion
      EnvironmentName: Blue
      CNAMEPrefix: !Ref PrefixProduction
      SolutionStackName: "64bit Amazon Linux 2023 v5.1.0 running Tomcat 10 Corretto 17"
      OptionSettings: 
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref BeanstalkServiceRole        # What is the ElasticBeanstalk service allowed to do?
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref MyBeanstalkInstanceProfile  # What is my EC2 instance allowed to do?

  GreenEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      VersionLabel: !Ref GreenVersion
      EnvironmentName: Green
      CNAMEPrefix: !Ref PrefixStaging
      SolutionStackName: "64bit Amazon Linux 2023 v5.1.0 running Tomcat 10 Corretto 17"
      OptionSettings: 
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref BeanstalkServiceRole        # What is the ElasticBeanstalk service allowed to do?
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref MyBeanstalkInstanceProfile  # What is my EC2 instance allowed to do?


  # Attaches the role to the instance:
  MyBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
      - !Ref BeanstalkAppRole 

Outputs:
  ProductionURL:
    Value: !Sub http://${BlueEnvironment.EndpointURL} 

  StagingURL:
    Value: !Sub http://${GreenEnvironment.EndpointURL} 
