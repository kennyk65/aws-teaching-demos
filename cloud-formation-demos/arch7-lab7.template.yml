AWSTemplateFormatVersion: 2010-09-09

# Automatically creates AWS Arch 7 lab 7 "capstone" lab.
# TODO: Convert to Aurora by adding a DB cluster.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
    - Label: 
        default: Database
      Parameters: 
      - MasterDatabaseName
      - MasterUsername
      - MasterUserPassword
    - Label: 
        default: WordPress
      Parameters: 
      - Username
      - Password
      - Email
    - Label: 
        default: Network
      Parameters: 
      - VPCCIDR
      - PublicSubnet1Param
      - PublicSubnet2Param
      - AppSubnet1Param
      - AppSubnet2Param
      - DatabaseSubnet1Param
      - DatabaseSubnet2Param

Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
      - 10.0.0.0/16

  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.0.0.0/24
    AllowedValues:
      - 10.0.0.0/24

  PublicSubnet2Param:
    Description: Public Subnet 2
    Type: String
    Default: 10.0.1.0/24
    AllowedValues:
      - 10.0.1.0/24

  AppSubnet1Param:
    Description: App Subnet 1
    Type: String
    Default: 10.0.2.0/24
    AllowedValues:
      - 10.0.2.0/24

  AppSubnet2Param:
    Description: App Subnet 2
    Type: String
    Default: 10.0.3.0/24
    AllowedValues:
      - 10.0.3.0/24

  DatabaseSubnet1Param:
    Description: Private Subnet 1
    Type: String
    Default: 10.0.4.0/24
    AllowedValues:
      - 10.0.4.0/24

  DatabaseSubnet2Param:
    Description: Private Subnet 2
    Type: String
    Default: 10.0.5.0/24
    AllowedValues:
      - 10.0.5.0/24

  MasterUsername:
    Description: Value to use for DB username
    Type: String 
    Default: admin

  MasterUserPassword:
    Description: Value to use for DB password
    Type: String 
    Default:  admin123

  MasterDatabaseName:
    Description: Database name
    Type: String 
    Default:  WPDatabase

  Username:
    Description: Value to use for wordpress username
    Type: String 
    Default:  wpadmin

  Password:
    Description: Value to use for wordpress Password
    Type: String 
    Default:  wpadmin123

  Email:
    Description: Value to use for wordpress Password
    Type: String 
    Default:  xxx@gmail.com


Resources:
  # VPC and Network Structure
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: LabVPC

  LabInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref LabInternetGateway

  #NATs
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway1

  ElasticIPAddress1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NATGateway2

  ElasticIPAddress2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  #Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PublicSubnet1Param
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref PublicSubnet2Param
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: PublicSubnet2

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref AppSubnet1Param
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: AppSubnet1

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref AppSubnet2Param
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: AppSubnet2

  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref DatabaseSubnet1Param
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: DatabaseSubnet1

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref DatabaseSubnet2Param
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: DatabaseSubnet2

  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: ElasticacheSubnetGroup
      Description: This Elasticache subnet group selects the same subnets as is used for the Aurora DB in task 2
      SubnetIds:
      - !Ref AppSubnet1
      - !Ref AppSubnet2
      Tags:
      - Key: Name
        Value: ElasticacheSubnetGroup

  #Routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTableAZ1

  PrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTableAZ2
  #Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LabInternetGateway

  PrivateRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  
  #Subnet Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet1
      RouteTableId: !Ref PrivateRouteTableAZ1

  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet2
      RouteTableId: !Ref PrivateRouteTableAZ2

  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet1
      RouteTableId: !Ref PrivateRouteTableAZ1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet2
      RouteTableId: !Ref PrivateRouteTableAZ2

  # Security Groups
  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group allowing HTTP traffic for lab instances
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-AppInstanceSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group allowing RDS instances to have internet traffic
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-RDSSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0

  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group allowing ElastiCache to have internet traffic
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ElastiCacheSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 11211
        ToPort: 11211
        CidrIp: 0.0.0.0/0

  EFSMountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group allowing traffic between EFS Mount Targets and Amazon EC2 instances
      VpcId: !Ref LabVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EFSMountTargetSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        SourceSecurityGroupId: !Ref AppInstanceSecurityGroup
        FromPort: 80
        ToPort: 80
      - IpProtocol: TCP
        FromPort: 2049
        ToPort: 2049
        CidrIp: 0.0.0.0/0

  # Relational Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Lab DB Subnet Group
      SubnetIds:
      - !Ref DatabaseSubnet1
      - !Ref DatabaseSubnet2

  labdbinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref MasterDatabaseName    # Name cannot have dashes, so difficult to use stack name as part of db name
      # DBClusterIdentifier: aurora
      AllocatedStorage: 5
      DBInstanceClass: db.t3.small
      Engine: mysql  # aurora-mysql
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
      - !Ref RDSSecurityGroup
      Tags:
      - Key: Name
        Value: MySQL Lab DB Instance

  # The Cache:
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties: 
      CacheSubnetGroupName: !Sub ${AWS::StackName}-LabCacheSubnetGroup
      Description: Lab Cache Subnet Group
      SubnetIds: 
      - !Ref AppSubnet1
      - !Ref AppSubnet2

  TheCache:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      AZMode: single-az
      Engine: memcached
      CacheNodeType: cache.t3.micro
      ClusterName: !Sub ${AWS::StackName}-MemcachedCluster
      VpcSecurityGroupIds: 
      - !Ref ElastiCacheSecurityGroup
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      NumCacheNodes: 2

  # Shared EFS file system:
  TheEfs:
    Type: AWS::EFS::FileSystem
    Properties: 
      BackupPolicy: 
        Status: DISABLED 
      Encrypted: false
      PerformanceMode: generalPurpose 
      ThroughputMode: bursting

  EfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !GetAtt TheEfs.FileSystemId
      SecurityGroups: 
      - !Ref EFSMountTargetSecurityGroup
      SubnetId: !Ref AppSubnet1

  EfsMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !GetAtt TheEfs.FileSystemId
      SecurityGroups: 
      - !Ref EFSMountTargetSecurityGroup
      SubnetId: !Ref AppSubnet2

  # EC2 Instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LabLaunchTemplate
      LaunchTemplateData:
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
        SecurityGroupIds:
        - !Ref AppInstanceSecurityGroup
        - !Ref RDSSecurityGroup
        - !Ref ElastiCacheSecurityGroup
        - !Ref EFSMountTargetSecurityGroup
        InstanceType: t3.medium
        UserData:
          Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            DB_NAME=${MasterDatabaseName}
            DB_HOSTNAME=${labdbinstance.Endpoint.Address}
            DB_USERNAME=${MasterUsername}
            DB_PASSWORD=${MasterUserPassword}
            WP_ADMIN=${Username}
            WP_PASSWORD=${Password}
            WP_EMAIL=${Email}
            LB_HOSTNAME=${ALB.DNSName}
            yum update -y
            yum install -y amazon-linux-extras
            yum install -y awslogs httpd mysql gcc-c++
            amazon-linux-extras enable php7.4
            yum clean metadata
            yum install -y php php-{pear,cgi,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,imap,devel,opcache}
            systemctl enable nfs-server.service
            systemctl start nfs-server.service
            mkdir -p /var/www/wordpress
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress

            ## create site config
            cat <<EOF >/etc/httpd/conf.d/wordpress.conf
            ServerName 127.0.0.1:80
            DocumentRoot /var/www/wordpress
            <Directory /var/www/wordpress>
              Options Indexes FollowSymLinks
              AllowOverride All
              Require all granted
            </Directory>
            EOF

            ## install cache client
            pecl install igbinary
            wget -P /tmp/ https://elasticache-downloads.s3.amazonaws.com/ClusterClient/PHP-7.4/latest-64bit-X86
            cd /tmp
            tar -zxvf latest-64bit-X86
            cp '/tmp/amazon-elasticache-cluster-client.so' /usr/lib64/php/modules/
            if [ ! -f /etc/php.d/50-memcached.ini ]; then
                touch /etc/php.d/50-memcached.ini
            fi
            echo 'extension=igbinary.so;' >> /etc/php.d/50-memcached.ini
            echo 'extension=/usr/lib64/php/modules/amazon-elasticache-cluster-client.so;' >> /etc/php.d/50-memcached.ini

            ## install WordPress and WP CLI
            curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x /bin/wp
            wget -P /tmp/ https://wordpress.org/latest.tar.gz
            tar -vxzf latest.tar.gz -C /var/www/
            cp /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php
            cd /var/www/wordpress/
            sed -i 's/database_name_here/'"$DB_NAME"'/' wp-config.php
            sed -i 's/username_here/'"$DB_USERNAME"'/' wp-config.php
            sed -i 's/password_here/'"$DB_PASSWORD"'/' wp-config.php
            sed -i 's/localhost/'"$DB_HOSTNAME"'/' wp-config.php

              # install WordPress if not installed
              # use public alb host name if wp domain name was empty
            if ! $(wp core is-installed --allow-root); then
                wp core install --url="http://$LB_HOSTNAME" --title='Wordpress on AWS' --admin_user="$WP_ADMIN" --admin_password="$WP_PASSWORD" --admin_email="$WP_EMAIL" --allow-root
                wp plugin install w3-total-cache --allow-root
                chown -R apache:apache /var/www/wordpress
                chmod u+wrx /var/www/wordpress/wp-content/*
                if [ ! -f /var/www/wordpress/opcache-instanceid.php ]; then
                  wget -P /var/www/wordpress/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
                fi
            fi
            RESULT=$?
            echo $RESULT
            if [ $RESULT -eq 0 ]; then
                touch /var/www/wordpress/wordpress.initialized
            else
                touch /var/www/wordpress/wordpress.failed
            fi

            ## install opcache
            # create hidden opcache directory locally & change owner to apache

            mkdir -p /var/www/.opcache
            # enable opcache in /etc/php-7.0.d/10-opcache.ini
            sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php.d/10-opcache.ini
            sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php.d/10-opcache.ini
            # download opcache-instance.php to verify opcache status
            if [ ! -f /var/www/wordpress/opcache-instanceid.php ]; then
                wget -P /var/www/wordpress/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
            fi

            chkconfig httpd on
            service httpd start
          - ElasticFileSystem: !Ref TheEfs

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-ASG   
      VPCZoneIdentifier: 
      - !Ref AppSubnet1
      - !Ref AppSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber        
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
      - !Ref ALBTargetGroup    
      Tags:
      - Key: Name
        Value: InventoryApp
        PropagateAtLaunch: true

  # An Application Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-LabAppALB
      Scheme: internet-facing
      Subnets: 
      - !Ref PublicSubnet1     
      - !Ref PublicSubnet2
      SecurityGroups: [!Ref AppInstanceSecurityGroup ]
  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # TargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-ALBTargetGroup
      VpcId:  !Ref LabVPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP  # TODO: HOW TO SPECIFY PROTOCOL VERSION HTTP1
      HealthCheckPath: /wp-login.php
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      TargetType: instance
    

Outputs:

  CacheEndpoint:
    Description:  Endpoint URL and Address of the Memcached cluster
    Value: !Sub ${TheCache.ConfigurationEndpoint.Address}:${TheCache.ConfigurationEndpoint.Port}

  FileSystemId:
    Description:  Elastic File System ID
    Value:  !GetAtt TheEfs.FileSystemId

  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Sub http://${ALB.DNSName}

