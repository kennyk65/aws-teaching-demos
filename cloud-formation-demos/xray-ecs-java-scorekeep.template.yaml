AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to run ECS task/service to generate XRay activity.
  Based on original at: https://github.com/aws-samples/eb-java-scorekeep/blob/xray-gettingstarted/cloudformation/cf-resources.yaml

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: Network Configuration
        Parameters: 
        - VpcId
        - SubnetIds
      - Label: 
          default: ECS Cluster
        Parameters: 
        - FrontendImageUri
        - BackendImageUri
      - Label: 
          default: Other
        Parameters: 
        - Email
        - EcsAmiId

Parameters:
  Email:
    Type: String
    Default: UPDATE_ME  # <- change to a valid "abc@def.xyz" email (without quotes)
    Description:  Change this to a valid email address for notifications

  FrontendImageUri:
    Type: String
    Default: public.ecr.aws/xray/scorekeep-frontend:latest

  BackendImageUri:
    Type: String
    Default: public.ecr.aws/xray/scorekeep-api:latest

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select an existing VPC in which to launch your container instances.

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: list of existing VPC Subnet Ids where ECS instances will run

  EcsAmiId:
    Description: Latest stable AMI for ECS Clusters.  You should not need to modify this.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scorekeep-user
      KeySchema:
        HashKeyElement: {AttributeName: id, AttributeType: S}
      ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scorekeep-session
      KeySchema:
        HashKeyElement: {AttributeName: id, AttributeType: S}
      ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}

  GameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scorekeep-game
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: session
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: session-index
        KeySchema:
        - AttributeName: session
          KeyType: HASH
        ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}
        Projection: { ProjectionType: ALL }
      ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}

  MoveTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scorekeep-move
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: game
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: game-index
        KeySchema:
        - AttributeName: game
          KeyType: HASH
        ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}
        Projection: { ProjectionType: ALL }
      ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}

  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scorekeep-state
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: game
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: game-index
        KeySchema:
        - AttributeName: game
          KeyType: HASH
        ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}
        Projection: { ProjectionType: ALL }
      ProvisionedThroughput: {ReadCapacityUnits: 2, WriteCapacityUnits: 2}

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-scorekeep-notifications

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-scorekeepExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - ecs-tasks.amazonaws.com
          Action: 
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-scorekeepRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - ecs-tasks.amazonaws.com
          Action: 
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      - arn:aws:iam::aws:policy/AWSXrayFullAccess

  ScorekeepECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ScorekeepECSRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Principal:
            Service: [ ec2.amazonaws.com ]
          Effect: Allow
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ScorekeepInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub ${AWS::StackName}-ScorekeepECSRole
      Roles: 
      - !Ref ScorekeepECSRole

  ScorekeepECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub ${AWS::StackName}

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: t3.small
      IamInstanceProfile: !Ref ScorekeepInstanceProfile
      SecurityGroups: 
      - !Ref EcsSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ScorekeepECSCluster} >> /etc/ecs/ecs.config;
          echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;

  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ECS Instance
        PropagateAtLaunch: true
      - Key: Description
        Value: ECS Cluster Member
        PropagateAtLaunch: true
      TargetGroupARNs:
      - !Ref ScorekeepTargetGroup

  ScorekeepService:
    Type: AWS::ECS::Service
    DependsOn:  EcsInstanceAsg    # No point trying to launch tasks until some cluster capacity is available.
    Properties:
      ServiceName: !Sub ${AWS::StackName}-scorekeep-service
      Cluster: !Ref ScorekeepECSCluster
      DeploymentConfiguration:   
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref ScorekeepTaskDefinition

  ScorekeepTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
      - Name: scorekeep-frontend
        Image: !Ref FrontendImageUri
        Cpu: '256'
        MemoryReservation: '256'
        PortMappings: 
        - ContainerPort: '80'
      - Name: scorekeep-api
        Image: !Ref BackendImageUri
        Cpu: '512'
        MemoryReservation: '512'
        Environment: 
        - Name: AWS_REGION
          Value: !Sub ${AWS::Region}
        - Name: NOTIFICATION_TOPIC
          Value: !GetAtt NotificationTopic.TopicArn
        - Name: NOTIFICATION_EMAIL
          Value: !Ref Email
        PortMappings: 
        - ContainerPort: '5000'
      - Name: xray-daemon
        Image: amazon/aws-xray-daemon
        Cpu: '256'
        MemoryReservation: '128'
        Essential: true
        PortMappings: 
        - ContainerPort: '2000'
          HostPort: '2000'
          Protocol: udp
      Cpu: 1024
      ExecutionRoleArn: !Ref ECSExecutionRole
      Family: scorekeep
      Memory: 900
      NetworkMode: host
      RequiresCompatibilities: 
      - EC2
      TaskRoleArn: !Ref ECSTaskRole

  ScorekeepTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-ScorekeepTargetGroup
      TargetType: instance
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId

  ScorekeepLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-scorekeep-lb
      Scheme: internet-facing
      SecurityGroups: 
      - !Ref EcsSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-
      Type: application

  ScorekeepLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ScorekeepTargetGroup
      LoadBalancerArn: !Ref ScorekeepLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt ScorekeepLoadBalancer.DNSName