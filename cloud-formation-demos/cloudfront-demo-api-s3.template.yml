
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# CloudFront Distribution with multiple origins; an S3 bucket and API Gateway.
# WARNING:  CloudFront distributions take about 5-10 minutes to create / update.  

Parameters:

  BucketName:
    Description:  Globally unique S3 bucket name.    
    Type:  String
    Default:  kk-cloudfront-fullstack


Resources:

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  # Contents of the bucket are only gettable through the CloudFront distribution:
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3Bucket
      PolicyDocument: 
        Statement: 
        - Effect: Allow                                  #  Allow...
          Principal:
            Service: cloudfront.amazonaws.com            # ...a CloudFront distribution...
          Action:                                        # ...to perform GetObject on...
          - s3:GetObject
          Resource: !Sub arn:aws:s3:::${S3Bucket}/*      #  ...any object in this S3 bucket.
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}   # This policy is based on Origin Access Control

  # API Gateway with a mock /api/hello resource:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub MyApi-${AWS::StackName}
      StageName: prod
      DefinitionBody: # Define the API structure inline
        swagger: "2.0"
        info:
          title: MyApi
        paths:
          /api/hello:
            get:
              responses:
                "200":
                  description: Successful GET request
                  headers:
                    Content-Type:
                      type: string
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
              x-amazon-apigateway-integration: # Mock integration
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: '{"message": "hello world"}'
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "CloudFront Distribution for API Gateway"
        Enabled: true
        Origins:
        - Id: ApiGatewayOrigin
          DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
          OriginPath: "/prod"
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        - Id: S3Origin
          DomainName: !GetAtt S3Bucket.RegionalDomainName   # Must be region specific to avoid redirect behavior when buckets are new
          OriginAccessControlId: !Ref OAC
          S3OriginConfig:
            OriginAccessIdentity: ''   # This is required, but unneeded when using OAC.  Must supply an empty string.

        DefaultCacheBehavior:
          TargetOriginId: S3Origin # Default to S3
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized, recommended for S3
          FunctionAssociations:       
          - EventType: viewer-request
            FunctionARN: !GetAtt RootRewriteFunction.FunctionARN  # changes "/" requests to "/index.html"

        CacheBehaviors: # Use Cache Behaviors for path-based routing
        - PathPattern: /api/* # Matches paths starting with /api
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [ "GET", "HEAD", "OPTIONS"]
          CachedMethods: [ "GET", "HEAD", "OPTIONS"]
          CachePolicyId:  4135ea2d-6df8-44a3-9df3-4b5a84be39ad   # "CachingDisabled" on the console.
          OriginRequestPolicyId:  b689b0a8-53d0-40ab-baf2-68738e2966ac  # "AllViewerExceptHostHeader" on the console.

  OAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
          Description: An optional description for the origin access control
          Name: !Sub OAC-${AWS::StackName}
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

  # CloudFront Function used to rewrite "/" requests to "/index.html"
  RootRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: RewriteRootToIndexHtml
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          if (request.uri === "/") {
            request.uri = "/index.html";
          }
          return request;
        }
      FunctionConfig:
        Comment: "Rewrites / to /index.html for S3 origin"
        Runtime: cloudfront-js-1.0

  # Custom resource established placeholder index.html in S3 bucket, and deletes it on stack delete.
  S3BucketDeployment:
    Type: Custom::S3BucketDeployment
    Properties:
      ServiceToken: !GetAtt S3BucketDeploymentFunction.Arn
      BucketName: !Ref S3Bucket
      SourceObject: |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>CloudFront Demo</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        </head>
        <body class="text-center mt-5">
            <div class="container">
                <h1>CloudFront Demo</h1>
                <p>Click the button to call the API Gateway resource.</p>
                <button id="callApiButton" class="btn btn-primary">Call /api/hello</button>
                <div id="result" class="mt-3 fs-5 text-muted"></div>
            </div>
            <script>
                document.getElementById("callApiButton").addEventListener("click", async () => {
                    const resultDiv = document.getElementById("result");
                    resultDiv.textContent = "Loading...";

                    const response = await fetch("/api/hello");
                    const text = await response.text();
                    resultDiv.textContent = response.ok ? `Response: ${text}` : `Error: ${response.status} - ${text}`;
                });
            </script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
        </body>
        </html>


  S3BucketDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CustomResource-${AWS::StackName}
      Handler: index.handler
      Runtime: python3.13
      Timeout: 30
      Role: !GetAtt S3BucketDeploymentRole.Arn
      Code:
        ZipFile: |
          import boto3, json
          import cfnresponse
          
          def handler(event, context):
            # print(event)
            requestType = event["RequestType"]
            rp           = event['ResourceProperties']
            s3Bucket      = rp['BucketName']
            source_object  = rp['SourceObject']
            responseData    = {}
            msg = ""

            try:
              if requestType == 'Create' or  requestType == 'Update':
                boto3.client('s3').put_object(Bucket=s3Bucket,Body=source_object.encode('utf-8'),Key='index.html',ContentType='text/html')
                msg = "Established index.html file in S3 bucket"

              if requestType == 'Delete':
                boto3.resource('s3').Bucket(s3Bucket).objects.all().delete()
                msg = "Bucket cleanup complete"

            except Exception as e:
              msg = f"Exception raised for function: Exception details: {e}"
              print(msg)
              responseData['Reason'] = msg
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, event["LogicalResourceId"]);
              
            # Unless something blew up, we should wander into this code:
            print(msg)
            responseData['Reason'] = msg
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event["LogicalResourceId"]);

  S3BucketDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CustomResourceLambaRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub S3BucketDeploymentPolicy-${AWS::StackName}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - '*'

Outputs:
  TheURL:
    Description:  WARNING - There may be a delay until this URL is available
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  # They don't give you the URL, you have to EARN it:
  RestAPIProdStageURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/hello
    Description: URL of the Prod Stage of the generated REST API.  This is the thing you call.
