---
AWSTemplateFormatVersion: '2010-09-09'
      
# This template creates a (nearly) identical environment to what students produce manually in AWS Arch lab 1.
# The main difference is the IAM Role and DB subnet groups are created within this template.
# To run you'll only need an existing VPC, Default will do.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet
          - PrivateSubnets
          - PrivateKeyName

Parameters:
  PrivateKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the instance, if needed.

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select the Lab VPC to use for the lab

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.
    
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select 2 subnets in your selected VPC, RDS instance will run here.


Resources:

  # Security Group for the web server.  Allow HTTP from anywhere, but SSH only from the Bastion server:
  AppSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: App-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

  # Security Group for the RDS instance.  Allow port 3306 but only from the AppSg.
  DbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: DB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref AppSg

  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
      KeyName: !Ref PrivateKeyName                                    # We get the keypair name from the input parameters
      InstanceType: t2.micro                                          # Any instance type will do
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'                              # We will need a public IP address
        SubnetId: !Ref PublicSubnet                                   # We should sit in a public subnet.
        GroupSet:
        - Ref: AppSg                                                  # Attach the security group
      UserData:      #  What to run:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install Apache Web Server and PHP
          yum install -y httpd mysql
          amazon-linux-extras install -y php7.2
          # Download Lab files
          wget https://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-TF-100-ARCHIT/v6.7.0/lab-2-webapp/scripts/inventory-app.zip
          unzip inventory-app.zip -d /var/www/html/
          # Download and install the AWS SDK for PHP
          wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
          unzip aws -d /var/www/html
          # Turn on web server
          chkconfig httpd on
          service httpd start

  # RDS instances need to know which subnets they are allowed to run in:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Lab DB Subnet Group
      DBSubnetGroupName: Lab DB Subnet Group
      SubnetIds: !Ref PrivateSubnets
      Tags:
        - Key: Name
          Value: DBSubnetGroup
          
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: inventory
      DBInstanceIdentifier: inventory-db
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: master
      MasterUserPassword: lab-password
      MultiAZ: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DbSg
      Tags:
        - Key: Name
          Value: inventory-db


  # EC2 instance will need to talk to SSM to read parameters:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:*
                Resource: 'arn:aws:ssm:*:*:parameter/inventory-app/*'

  # Attach EC2Role's permissions to each ECS Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]



# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  EC2InstancePublicIP:
    Description: The IP address for EC2 instance.
    Value: !Sub http://${WebServer.PublicIp}

  DbEndpoint:
    Description: The endpoint of the RDS instance we created.
    Value: !GetAtt RDSDatabase.Endpoint.Address