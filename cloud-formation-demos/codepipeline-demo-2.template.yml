AWSTemplateFormatVersion: 2010-09-09

# This is a simple codepipeline demo that does very little beyond what the CodeBuild demo did.
# It is a bit more sophisticated because it separates the source, build, and testing.
# to make things fun, the build phase is two separate actions in parallel: one does tests and the other packaging.

# TO RUN THIS:  You'll need a GitHub Repository, and a GitHub OAuthToken.
# To make a GitHub OAuthToken, go to GitHub / Settings / Developer Settings / Personal Access Tokens
# Put a 'g' on the front of the value you see here.


Parameters:
  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use.  Specify the prefix for the bucket name
    Type: String
    Default: codepipeline-kk-

  GitHubRepository:
    Type: String
    Default:  kennyk65/aws-cloudbuild-demo/master
    Description:  The owner / repository / branch that you want to pull from.

  GitHubOAuthToken:
    Type: String
    Default:  hp_qE7Ufaq01ypwGYFBTLKFZilbDMHsXr3MnCXx     # put a g in front
    Description:  CodePipeline sources require an OAuthToken, even if they are public.  To make one go to GitHub / Settings / Personal Access Tokens.  Or put a 'g' in front of this one. 

  OutputS3BucketAndPrefix:
    Description: Existing S3 Bucket (and optional folder/prefix) where you want to place output artifacts
    Type: String
    Default: kk-uploads-oregon/build-output


Resources:

  # This Role allows CodeBuild to do certain things on our behalf.
  # See the policy for the interesting stuff:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole

  # This Role allows CodePipeline to make certain things on our behalf:
  # See the policy for the interesting stuff:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodePipelineRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the CodeBuildRole.
  # CodeBuild is allowed carte blanche on S3, CodeBuild, and CloudWatch Logs; could probably be tightened quite a bit.
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
          Resource: "*"
      Roles: 
        -  !Ref CodeBuildRole

  # This Policy is attached to the CodePipelineRole.
  # CodePipeline is allowed carte blanche on S3, CodeBuild, and CloudWatch Logs; could probably be tightened quite a bit.
  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CodePipelinePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I can't quite determine which S3 permission CodePipeline wants.  The one-click policy grants everything...
          # codebuild probably does not need to be wide open like this, and the logs should only need
          # to create the stream, group, and log events.
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
          Resource: 
            - "*"
      Roles: 
        -  !Ref CodePipelineRole

  # General Bucket where CodePipeline will store things:
  S3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${CodePipelineBucketPrefix}-${AWS::Region}


  # This CodeBuild project runs packaging only, tests are separate.
  MyBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-MyBuild
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0         
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs a Maven build, packaging only.  Tests run separately.
            # The output file is identified by its name only (getting rid of 'target' on the path), which means it will 
            # show up later in the S3 bucket with just its name and no pathing.
            phases:
              install:
                runtime-versions:
                  java: corretto17  
              build:
                commands:
                  - mvn package -DskipTests
              post_build:
                commands:
                  - echo Copying WAR file to S3
                  - aws s3 cp ./target/*.war s3://${OutputS3BucketAndPrefix}/
            artifacts:
              files:
                - target/cloud-build-demo-17.war
              discard-paths: yes
            #  This is implementing a "local / custom" cache to reduce maven download time on subsequent builds.
            #  See https://aws.amazon.com/about-aws/whats-new/2019/02/aws-codebuild-now-supports-local-caching/
            cache:
              paths:
                - '/root/.m2/**/*' 
      Artifacts:    
        Type: CODEPIPELINE

  # This CodeBuild project runs unit tests only.  
  # The intent is to run parallel to the packaging to decrease build duration.
  MyTests:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-MyTests
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0        
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs the maven tests only.  No output.
            phases:
              install:
                runtime-versions:
                  java: corretto17 
              build:
                commands:
                  - echo Testing started on `date`
                  - mvn test
                  - echo Testing finished on `date`
            #  This is implementing a "local / custom" cache to reduce maven download time on subsequent builds.
            #  See https://aws.amazon.com/about-aws/whats-new/2019/02/aws-codebuild-now-supports-local-caching/
            cache:
              paths:
                - '/root/.m2/**/*' 
      Artifacts:    
        Type: CODEPIPELINE

  # This is the CodePipeline with its stages:
  MyPipe:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-MyPipe
      ArtifactStore: 
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages: 

      # Stage 1:  Get the source from GitHub:
      - Name: Source
        Actions: 
          - Name: SourceAction
            RunOrder: 1
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty       
              Provider: GitHub        
              Version: 1              # Don't know the purpose of 'version'
            Configuration: 
              Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
              Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
              Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
              PollForSourceChanges: true   # Don't know if/how to control frequency
              OAuthToken: !Ref GitHubOAuthToken     # Public repository, Don't know why AWS needs this
            OutputArtifacts: 
              - Name: TheSourceCode

      # Stage 2:  Build using CodeBuild / Maven, Test in parallel using CodeBuild / Maven:
      - Name: Build
        Actions:
          # This runs a Maven build which packages the WAR.  Test are run in the parallel action below: 
          - Name: Build
            RunOrder: 1
            InputArtifacts: 
              - Name: TheSourceCode       # Duh, the output from the previous step.
            ActionTypeId: 
              Category: Build
              Owner: AWS       
              Provider: CodeBuild        
              Version: 1                  # Don't know the purpose of 'version'
            Configuration:
              ProjectName:  !Ref MyBuild  # See the CodeBuild definition above.       
            OutputArtifacts: 
              - Name: TheArtifact  

          # This runs a Maven build featuring only the unit tests.  No output:   
          - Name: UnitTest
            RunOrder: 1
            InputArtifacts: 
              - Name: TheSourceCode       
            ActionTypeId: 
              Category: Build
              Owner: AWS       
              Provider: CodeBuild        
              Version: 1                  
            Configuration:
              ProjectName:  !Ref MyTests  # See the CodeBuild definition above.       

  # This custom resource calls our Lambda function:
  CustomResourceBucketCleaner:
    Type: Custom::bucketCleaner
    Properties:
      ServiceToken: !GetAtt CustomResourceBucketCleanerLambda.Arn
      destinationBucket: !Ref S3

  # This function will cleanup the S3 bucket before delete.
  CustomResourceBucketCleanerLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudwatchLogsGroupBucketCleaner
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-BucketCleanerCustomResource
      Description: Cleans out the S3 bucket on stack delete
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 10         
      Runtime: python3.12
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3

          # Entry point:
          def lambda_handler(event, context):
              # Get the CloudFormation request type
              requestType = event['RequestType']
              destinationBucket = event['ResourceProperties']['destinationBucket']

              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Delete':
                print ('Clean out bucket to enable delete... ' )
                boto3.resource('s3').Bucket(destinationBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CustomResourcePolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:List*
              - s3:Delete*
            Resource: "*"

  # CloudWatch Logs Groups are created automatically when CodeBuild or Lambda writes output,
  # but they are easier to cleanup when they are part of the stack.  
  CloudwatchLogsGroupBuild:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-MyBuild
      RetentionInDays: 3

  CloudwatchLogsGroupTest:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-MyTest
      RetentionInDays: 3

  CloudwatchLogsGroupBucketCleaner:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-BucketCleanerCustomResource
      RetentionInDays: 3


Outputs:
  CodeBuild:
    Value: !Ref MyPipe
  IamRole:
    Value: !Ref CodeBuildRole  
