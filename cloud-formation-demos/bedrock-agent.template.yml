AWSTemplateFormatVersion: '2010-09-09'

# This creates a VERY simple BedrockAgent associated with the given foundational model.
# When you call the agent with a request like "what is the latest stock price for AAPL?", 
# the agent will respond with a hard-coded stock price.  The agent does this by
# invoking a Lambda function that you provide.  The Lambda function is responsible for
# executing the business logic to determine the stock price, but I'm just hard-coding.
# The model you select MUST BE ENABLED in Bedrock, and must be one of the models
# that works with Bedrock agents.

Parameters:
  FoundationalModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: The foundational model to use for the agent.  Make sure it is enabled.

Resources:
  # Create a Lambda function
  StockLookupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-StockLookupFunction
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              agent = event['agent']
              actionGroup = event['actionGroup']
              function = event['function']
              parameters = event.get('parameters', [])

              # Execute your business logic here. For more information, refer to: https://docs.aws.amazon.com/bedrock/latest/userguide/agents-lambda.html
              stockPrice = 100 # Hard-coded example.
              
              responseBody =  {
                  "TEXT": {
                      "body": "The function {} was called successfully!  The stock price is {}.".format(function,stockPrice)
                  }
              }

              action_response = {
                  'actionGroup': actionGroup,
                  'function': function,
                  'functionResponse': {
                      'responseBody': responseBody
                  }
              }

              dummy_function_response = {'response': action_response, 'messageVersion': event['messageVersion']}
              print("Response: {}".format(dummy_function_response))
              return dummy_function_response              

  # Create an IAM Role for the Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Add a resource policy to the Lambda function allowing Bedrock to invoke it
  LambdaInvokePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StockLookupLambdaFunction
      Principal: bedrock.amazonaws.com

  # Create an IAM Role for the Bedrock Agent
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-BedrockAgentRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
                
  # Create an AWS Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub ${AWS::StackName}-StockLookupAgent
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: !Ref FoundationalModel
      Instruction: |
        You are a helpful agent for finding information on stocks. To respond to current information, use the action group.
      ActionGroups:
      - ActionGroupName: StockLookupGroup
        Description: Group for stock lookup actions
        ActionGroupExecutor:
          Lambda: !GetAtt StockLookupLambdaFunction.Arn
        FunctionSchema:
          Functions:
          - Name: getStockPrice
            Description: Get the current stock price for a given stock symbol
            Parameters:
              stockSymbol:
                Type: string
                Required: true
                Description: stock ticker symbol to lookup

Outputs:

  BedrockAgentConsole:
    Description: The Bedrock console for the agent just constructed.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/bedrock/home?region=${AWS::Region}#/agents/${BedrockAgent}
