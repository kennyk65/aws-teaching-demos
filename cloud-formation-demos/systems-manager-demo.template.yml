---
AWSTemplateFormatVersion: '2010-09-09'

# This demo creates and tags some EC2 instances for targets for Systems Manager
# so you can run things like run command, inventory, or whatever


Parameters:

  WindowsAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
    Description: You probably won't need to change this value.  This is looking up the latest Windows AMI using the Parameter Store...



Resources:
  # First, A VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #  For simplicity, just 2 public subnets:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list   
      MapPublicIpOnLaunch: true     
      Tags:
      - Key: Name
        Value: Public Subnet A
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      MapPublicIpOnLaunch: true     
      Tags:
      - Key: Name
        Value: Public Subnet B
        
  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  # Security Group for the web server.  Allow HTTP from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0


  # Linux launch template:
  LaunchTemplateLinux:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-LinuxTemplate
      LaunchTemplateData: 
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
        InstanceType: t3.micro 
        IamInstanceProfile: 
          Name:  !Ref SSMInstanceProfile     # Allows EC2 Instance to talk with SSM
        NetworkInterfaces:
        - DeviceIndex: 0
          Groups: [ !Ref WebServerSecurityGroup ]   # Plug in the security group.
        UserData:      
          Fn::Base64: |
            #!/bin/bash 
            cd /tmp
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            start amazon-ssm-agent

  # Here's a Windows launch template: 
  LaunchTemplateWindows:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-WindowsTemplate
      LaunchTemplateData: 
        ImageId: !Ref WindowsAMI        # We lookup AMI using the AWS Systems Manager
        InstanceType: t3.micro 
        IamInstanceProfile: 
          Name:  !Ref SSMInstanceProfile     # Allows EC2 Instance to talk with SSM
        NetworkInterfaces:
        - DeviceIndex: 0
          Groups: [ !Ref WebServerSecurityGroup ]   # Plug in the security group.


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateLinux
        Version: !GetAtt LaunchTemplateLinux.LatestVersionNumber        
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: Sample
        PropagateAtLaunch: true
      - Key: Purpose                #  You can search for these key/values when you run your command.
        Value: Example
        PropagateAtLaunch: true

  AutoScalingGroupWindows:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateWindows
        Version: !GetAtt LaunchTemplateWindows.LatestVersionNumber        
      MinSize: 2     
      MaxSize: 6
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: Sample
        PropagateAtLaunch: true
      - Key: Purpose                #  You can search for these key/values when you run your command.
        Value: Example
        PropagateAtLaunch: true

        
  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SSMRole]

  # Allow EC2 instance to make calls to SSM.
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      # Note that any other policies required for the instance to do its job would be defined here as well.  


