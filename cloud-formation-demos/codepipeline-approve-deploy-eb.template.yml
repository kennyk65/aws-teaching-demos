AWSTemplateFormatVersion: 2010-09-09

# This is a  codepipeline demo that 
# 1) grabs code from GitHub on change 
# 2) packages and tests using paralell actions 
# 3) sends a manual approval to the email of your choice, to which you must respond 
# 4) deploy to ElasticBeanstalk.

# TO RUN THIS:  You'll need a GitHub Repository, and a GitHub OAuthToken.
# To make a GitHub OAuthToken, go to GitHub / Settings / Personal Access Tokens
# The default value you see here will work only if you prepend it with a 'g'.


Parameters:
  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use.  Specify the prefix for the bucket name
    Type: String
    Default: codepipeline-kk-

  GitHubRepository:
    Type: String
    Default:  kennyk65/aws-cloudbuild-demo/master
    Description:  The owner / repository / branch that you want to pull from.

  GitHubOAuthToken:
    Type: String
    Default: hp_qE7Ufaq01ypwGYFBTLKFZilbDMHsXr3MnCXx     # put a g in front
    Description:  CodePipeline sources require an OAuthToken, even if they are public.  To make one go to GitHub / Settings / Personal Access Tokens.  Or put a 'g' in front of this one. 

  OutputS3BucketAndPrefix:
    Description: Existing S3 Bucket (and optional folder/prefix) where you want to place output artifacts
    Type: String
    Default: kk-uploads-oregon/build-output

  emailAddress:
    Description: Eamail address to send approval notifications to
    Type: String
    Default: kenkrueger65@gmail.com

Resources:

  # This Role allows CodeBuild to do certain things on our behalf.
  # See the policy for the interesting stuff:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the CodeBuildRole.
  # CodeBuild is allowed carte blanche on S3, CodeBuild, and CloudWatch Logs; could probably be tightened quite a bit.
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
          Resource: "*"
      Roles: 
        -  !Ref CodeBuildRole

  # This Role allows CodePipeline to make certain things on our behalf:
  # See the policy for the interesting stuff:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the CodePipelineRole.
  # CodePipeline is allowed carte blanche on S3, CodeBuild, and CloudWatch Logs; could probably be tightened quite a bit.
  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CodePipelinePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I can't quite determine which S3 permission CodePipeline wants.  The one-click policy grants everything...
          # codebuild probably does not need to be wide open like this, and the logs should only need
          # to create the stream, group, and log events.
          # The real issue came when trying to deploy to elastic beanstalk.  The error would only go away with *.
          # Need SNS send message permission too
          Action: 
            # - logs:CreateLogGroup
            # - logs:CreateLogStream
            # - logs:PutLogEvents
            # - s3:putObject
            # - s3:getObject
            # - codebuild:*
            # - elasticbeanstalk:*
            - "*"
          Resource: 
            - "*"
      Roles: 
        -  !Ref CodePipelineRole

  # This Role is given to the ElasticBeanstalk environment:
  BeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-BeanstalkServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: elasticbeanstalk.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkServiceRole.
  BeanstalkServicePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-BeanstalkServicePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I'm not sure exactly what permissions are needed here.  Docs are nearly impossible.
          Action: 
            - elasticbeanstalk:*
            - elasticloadbalancing:Describe*
            - ec2:Describe*
            - ec2:Get*
            - ec2:Associate*
            - logs:*
            - s3:*
            - autoscaling:*   
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkServiceRole


  # This Role is given to the EC2 instance(s) run by ElasticBeanstalk:
  BeanstalkAppRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-BeanstalkInstanceRole  
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the BeanstalkAppRole.
  BeanstalkAppPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-BeanstalkAppPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          # I'm not sure exactly what permissions are needed here.  Definitely cloudwatch logs.
          Action: 
            - logs:Create*
            - logs:Get*
            - logs:Put*
            - logs:Describe*
          Resource: 
            - "*"
      Roles: 
        -  !Ref BeanstalkAppRole

  # General Bucket where CodePipeline will store things:
  S3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${CodePipelineBucketPrefix}${AWS::Region}


  # This CodeBuild project runs packaging only, tests are separate.
  # This is a Java / Maven build.  Most of the details on how to to the build 
  # itself is in the project's buildspec: https://github.com/kennyk65/aws-cloudbuild-demo/blob/master/buildspec.yml
  MyBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-SoftwareBuild
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs a Maven build, packaging only.  Tests run separately.
            # The output file will be ./target/cloud-build-demo-1.war, BUT codepipeline will zip this before sending it on, and ElasticBeanstalk cannot cope with the ZIP file containing one WAR.
            # The work-around is to specify the entire target folder as the output artifact, which is ridiculous and a much larger upload than it needs to be.
            phases:
              install:
                runtime-versions:
                  java: corretto17
              build:
                commands:
                  - mvn package -DskipTests
            artifacts:
              files:
                - '**/*'
              base-directory: 'target/cloud-build-demo-17'
            # THE PROBLEM I HAD is that codepipeline Zips the output artifacts, so it is a WAR within a ZIP.  
            # ElasticBeanstalk doesn't know how to deploy this, and there is no way to make code pipeline stop its zipping.
            # So a suggestion on the forum https://forums.aws.amazon.com/thread.jspa?threadID=244614 is to upload the unzipped folder produced by Maven before it makes the WAR.
            # So the ZIP file contains the same contents of the WAR.  When EB gets it, it unzips it an deploys it without issue - go figure.
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0        
      Artifacts:    
        Type: CODEPIPELINE

  # This CodeBuild project runs unit tests only.  
  # The intent is to run parallel to the packaging to decrease build duration.
  MyTests:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-SoftwareTest
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            # This AWS CodeBuild buildspec runs the maven tests only.  No output.
            phases:
              install:
                runtime-versions:
                  java: corretto17 
              build:
                commands:
                  - mvn test
            reports:
              # Capture the JUnit report
              mvn-test-reports:
                files:
                - "target/surefire-reports/*.xml"
                file-format: "JUNITXML"      
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0 
      Artifacts:    
        Type: CODEPIPELINE

  # This is the CodePipeline with its stages:
  MyPipe:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-MyPipe
      ArtifactStore: 
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn 
      Stages: 

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions: 
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId: 
                Category: Source
                Owner: ThirdParty       
                Provider: GitHub        
                Version: 1              # Required, meaningless and must be 1, go figure.
              Configuration: 
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                # PollForSourceChanges: true   # Not needed when using OAuth token.  Don't know if/how to control frequency
                OAuthToken: !Ref GitHubOAuthToken     # Public repository, Don't know why AWS needs this
              OutputArtifacts: 
                - Name: TheSourceCode

        # Stage 2:  Build using CodeBuild / Maven, Test in parallel using CodeBuild / Maven:
        - Name: Build
          Actions:
            # This runs a Maven build which packages the WAR.  Test are run in the parallel action below: 
            - Name: Build
              RunOrder: 1
              InputArtifacts: 
                - Name: TheSourceCode       # Duh, the output from the previous step.
              ActionTypeId: 
                Category: Build
                Owner: AWS       
                Provider: CodeBuild        
                Version: 1                  # Required, meaningless and must be 1.
              Configuration:
                ProjectName:  !Ref MyBuild  # See the CodeBuild definition above.       
              OutputArtifacts: 
                - Name: TheArtifact  

            # This runs a Maven build featuring only the unit tests.  No output:   
            - Name: UnitTest
              RunOrder: 1
              InputArtifacts: 
                - Name: TheSourceCode       
              ActionTypeId: 
                Category: Build
                Owner: AWS       
                Provider: CodeBuild        
                Version: 1                  
              Configuration:
                ProjectName:  !Ref MyTests  # See the CodeBuild definition above.       

        # Stage 3:  A manual approval: sns message goes out, someone approves:
        - Name: Approve
          Actions:
            - Name: Approve
              RunOrder: 1
              ActionTypeId:
                Category: Approval
                Owner: AWS       
                Provider: Manual        
                Version: 1                  
              Configuration:
                CustomData: Approval or Reject this change
                NotificationArn: !Ref SnsTopic  
                # TODO: Publish a link back to the CodeBuildved from the test phase.  Something like this:
                # ExternalEntityLink: !Sub https://us-west-2.console.aws.amazon.com/codesuite/codebuild/011673140073/testReports/reports/testreport-CodeBuildDemo-mvn-test-reports/testreport-CodeBuildDemo-mvn-test-reports%3A55a31b92-1db0-44f9-bc69-e2f30720f718?region=us-west-2&test-reports-meta=eyJmIjp7InRleHQiOiIifSwicyI6eyJkaXJlY3Rpb24iOjEsInByb3BlcnR5Ijoic3RhdHVzIn0sIm4iOjIwLCJpIjowfQ

        # Stage 4:  Deploy on ElasticBeanstalk:
        - Name: Deploy
          Actions:
            # This Deploys on ElasticBeanstalk so we can quickly smoke-test the running app: 
            - Name: Deploy
              RunOrder: 1
              InputArtifacts: 
                - Name: TheArtifact         # Duh, the output from the previous step.
              ActionTypeId: 
                Category: Deploy
                Owner: AWS       
                Provider: ElasticBeanstalk        
                Version: 1                  # Don't know the purpose of 'version'
              Configuration:
                ApplicationName:  !Ref MyBeanstalkApplication  # See the EB definition below.       
                EnvironmentName:  !Ref MyBeanstalkEnvironment  # See the EB definition below.       
 

  MyBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-TestApplication
      Description: Quick live-test environment for the app.

  MyBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyBeanstalkApplication
      EnvironmentName: !Sub ${AWS::StackName}-TestEnvironment
      Description: Quick live-test environment for the app.
      CNAMEPrefix: kk-test                          # This will become part of the DNS name.  Probably shouldn't be hard-coded.
      SolutionStackName: "64bit Amazon Linux 2023 v5.1.0 running Tomcat 10 Corretto 17"
      OptionSettings: 
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref BeanstalkServiceRole
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref MyBeanstalkInstanceProfile  # What is my EC2 instance allowed to do?


  SnsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Sub ${AWS::StackName}-CPApproval
      TopicName: !Sub ${AWS::StackName}-CPApproval
      Subscription:
        - Endpoint: !Ref emailAddress
          Protocol: email


  # Attaches the role to the instance:
  MyBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
      - !Ref BeanstalkAppRole 


  # This custom resource calls our Lambda function:
  CustomResourceBucketCleaner:
    Type: Custom::bucketCleaner
    Properties:
      ServiceToken: !GetAtt CustomResourceBucketCleanerLambda.Arn
      destinationBucket: !Ref S3

  # This function will cleanup the S3 bucket before delete.
  CustomResourceBucketCleanerLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudwatchLogsGroupBucketCleaner
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-BucketCleanerCustomResource
      Description: Cleans out the S3 bucket on stack delete
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 10         
      Runtime: python3.12
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3

          # Entry point:
          def lambda_handler(event, context):
              # Get the CloudFormation request type
              requestType = event['RequestType']
              destinationBucket = event['ResourceProperties']['destinationBucket']

              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Delete':
                print ('Clean out bucket to enable delete... ' )
                boto3.resource('s3').Bucket(destinationBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CustomResourcePolicy
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            Effect: Allow
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:List*
              - s3:Delete*
            Resource: "*"

  # CloudWatch Logs Groups are created automatically when CodeBuild or Lambda writes output,
  # but they are easier to cleanup when they are part of the stack.  
  CloudwatchLogsGroupBuild:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-SoftwareBuild
      RetentionInDays: 3

  CloudwatchLogsGroupTest:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-SoftwareTest
      RetentionInDays: 3

  CloudwatchLogsGroupBucketCleaner:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-BucketCleanerCustomResource
      RetentionInDays: 3


Outputs:
  CodePipelineConsole:
    Description:  Link to the CodePipeline console page for this pipeline
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${MyPipe}/view
  CodeBuild:
    Description:  Link to the main CodeBuild build project
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codesuite/codebuild/${AWS::AccountId}/projects/${MyBuild}
  IamRole:
    Value: !Ref CodeBuildRole  







