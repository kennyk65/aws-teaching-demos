---
AWSTemplateFormatVersion: '2010-09-09'

# Just run an EC2 with in a Default VPC/subnet with a sample program on it.

Parameters:
  PrivateKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access to the instance, if needed.

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.

Resources:

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup AMI in the region map
      InstanceType: t2.micro                                          # Any instance type will do
      KeyName: !Ref PrivateKeyName                                    # We get the keypair name from the input parameters
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true                                # We will need a public IP address
        SubnetId: !Ref PublicSubnet                                   # We should sit in a public subnet.
        GroupSet: [ !Ref WebServerSecurityGroup ]                     # Attach the security group
      UserData:      #  This code installs a demo Java/Spring app.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the OS and get Java
          yum -y update
          yum install -y wget java
          # Download Java/Spring app:
          wget https://kk-uploads-oregon.s3.amazonaws.com/spring-cloud-aws-environment-demo-1.jar
          mv *.jar app.jar
          chmod +x app.jar
          # Move app to var folders:
          mkdir /var/app
          mv app.jar /var/app
          # Run app as service by creating app.service file:
          cat > app.service <<EOF
          [Unit]
          Description=Spring Boot Demo
          
          [Service]
          SuccessExitStatus=143
          TimeoutStartSec=30
          TimeoutStopSec=10
          Restart=on-failure
          RestartSec=5
          ExecStart=/usr/bin/java -jar /var/app/app.jar --server.port=80
          
          [Install]
          WantedBy=multi-user.target
          EOF
          mv app.service /etc/systemd/system/
          # Run Java Spring app as service:
          systemctl daemon-reload
          systemctl enable app.service
          systemctl start app
          /opt/aws/bin/cfn-signal --resource WebServer --stack ${AWS::StackName}  --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT4M

Mappings:
  #  This is just the Amazon Linux 2 AMI.  These values change every few months:  
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-090fa75af13c156b4    # N Virginia
    us-east-2:
      AMI: ami-051dfed8f67f095f5    # Ohio      
    us-west-1:
      AMI: ami-0e4d9ed95865f3b40    # N California
    us-west-2:
      AMI: ami-0cea098ed2ac54925    # Oregon
    eu-west-1:
      AMI: ami-089950bc622d39ed8    # Ireland
    eu-central-1:
      AMI: ami-0c956e207f9d113d5    # Frankfurt
    sa-east-1:
      AMI: ami-0a9e90bd830396d02    # Sao Paulo
    ap-southeast-1:
      AMI: ami-0ff89c4ce7de192ea    # Singapore
    ap-southeast-2:
      AMI: ami-0c641f2290e9cd048    # Sydney
    ap-northeast-1:
      AMI: ami-0ecb2a61303230c9d    # Tokyo


Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet
          - PrivateKeyName
        

# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Sub http://${WebServer.PublicIp}
