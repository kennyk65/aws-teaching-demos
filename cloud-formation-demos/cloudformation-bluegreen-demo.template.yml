---
AWSTemplateFormatVersion: '2010-09-09'

# This demo build a simple stack running 4 instances of a "blue" version of an app.
# Build the stack, and when it is running, change to the "green" version and watch the update.   
      
Parameters:
  
  S3Bucket:
    Type: String
    Default: kk-uploads-oregon
    Description: Location of the blue and green WAR files.

  WARFile:
    Type: String
    Default: zero-downtime-blue-17.war
    Description: Object key (optional prefix) of WAR file to run as a webserver.


Resources:
  # First, A VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Lab VPC
        
  # Our VPC will need internet access:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: Public Subnet 1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Public Subnet 2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: Private Subnet 2
        
  #NATs
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-NAT
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC      

  # Some route tables for our subnets:        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:                  # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    DependsOn: 
    - AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  
  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
      
  # Security Group for the web server.  Allow HTTP from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
    
  # LaunchTemplate for the cluster
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData: 
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
        InstanceType: t3.micro            # Any instance type will do 
        NetworkInterfaces:
        - DeviceIndex: 0
          Groups: [ !Ref WebServerSecurityGroup ]   # Plug in the security group.
        UserData:       #  This code Installs the "blue" or "green" versions of our code:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum -y update
            yum install java-17-amazon-corretto -y
            yum install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -y
            start amazon-ssm-agent
            cd /tmp
            wget -q https://${S3Bucket}.s3.amazonaws.com/${WARFile}
            /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}
            sudo java -jar ${WARFile} --server.port=80     

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber        
      MinSize: 4        
      MaxSize: 6
      DesiredCapacity: 4
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:  [ !Ref ALBTargetGroup ]
      Tags:
      - Key: Name
        Value: !Sub WebServer-${WARFile}
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M # 5 minutes to download and launch the Spring app - more than enough.
    UpdatePolicy:
      AutoScalingRollingUpdate: 
        MaxBatchSize: 2
        MinInstancesInService: 4              # Have CF add two before removing 2         
#        MinSuccessfulInstancesPercent: 50    # Requires precision with resource signals that I don't want to mess with right now.
        WaitOnResourceSignals: true           # It takes a few minutes to download and install, so don't shift traffic until ready.
        PauseTime: PT5M                       # We'll wait up to 5 minutes for new instances to get ready.
        

  # An Application Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Scheme: internet-facing
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups: [!Ref WebServerSecurityGroup ]
  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # TargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TG
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:

  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Sub http://${ALB.DNSName}
