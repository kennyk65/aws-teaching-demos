---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install CloudWatchAgent on amazon linux. It was validated on amazon linux 2'

Parameters:

  LogGroupName:
    Description: The name of the CloudWatch log group that you want the CloudWatch agent to log to.
    Type: String
    Default: cloudwatch-agent-demo

Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"  # Obtain the AMI from the SSM Parameter
      InstanceType: t3.micro
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        # This script below is to install AmazonCloudWatchAgent
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y wget java
          # Install and run the difficult-to-use cloudwatch agent
          yum install -y amazon-cloudwatch-agent
          cd ~
          cat <<EOF > amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "log_group_name": "${LogGroupName}",
                      "log_stream_name": "demo-amazon-cloudwatch-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/app/spring-cloud-aws-environment-demo.log",
                      "log_group_name": "${LogGroupName}",
                      "log_stream_name": "spring-cloud-aws-environment-demo.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              },
              "log_stream_name": "default-stream",
              "force_flush_interval" : 15
            }                  
          }
          EOF
          chmod o=r amazon-cloudwatch-agent.json
          sudo mv amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          # Install spring boot app
          mkdir /app
          cd /app
          wget -q https://kk-uploads-oregon.s3.amazonaws.com/spring-cloud-aws-environment-demo-1.jar
          mv *.jar app.jar
          /opt/aws/bin/cfn-signal -e $? --resource EC2Instance --stack ${AWS::StackId} --region ${AWS::Region}
          sudo java -jar app.jar --server.port=80 --logging.file.name=spring-cloud-aws-environment-demo.log
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT5M"


  
  # Anything will do.  Can't have an EC2 instance without a SG
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: anything will do
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0


  # Attach Role to EC2 Instance.
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole]

  # Allow EC2 instance to make calls to SSM, Cloudwatch.
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      # Note that any other policies required for the instance to do its job would be defined here as well.  

  # Explicit declaration of the LogGroup allows us to control its retention:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain  # Keep the logs around if the stack fails 
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-${LogGroupName}
      RetentionInDays: 3


# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Sub http://${EC2Instance.PublicIp}

  CloudWatchLogsConsole:
    Description:  Link to the CloudWatch Logs console for your log group
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${CloudwatchLogsGroup}

  SessionManagerLink:
    Description: Access instance via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EC2Instance}?region=${AWS::Region}#  

