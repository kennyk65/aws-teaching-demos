---
AWSTemplateFormatVersion: '2010-09-09'

# This downloads and runs a Spring Boot app on an EC2 instance as a Linux service, using systemd (modern approach)

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - VPC
          - PublicSubnet
          - AmazonLinuxAMI
          - LogGroupSuffix

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC, one with public subnets

  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a public subnet in your selected VPC.  The web server will run here.

  LogGroupSuffix:
    Description: The suffix of the CloudWatch log group to be logged to (prefix is the stack name).
    Type: String
    Default: SystemD-Demo

Mappings:
  #  This is the Ubuntu 20.04 AMI as of 8/5/22.  These values change every few months:  
  UbuntuAMI:
    us-east-1: 
      AMI: ami-08d4ac5b634553e16    # Virginia
    us-east-2:
      AMI: ami-0960ab670c8bb45f3    # Ohio
    us-west-1:
      AMI: ami-01154c8b2e9a14885    # N California
    us-west-2:
      AMI: ami-0ddf424f81ddb0720    # Oregon
    ap-south-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Mumbai
    ap-northeast-2:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Seoul
    ap-southeast-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Singapore
    ap-southeast-2:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Sydney
    ap-northeast-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Tokyo
    ca-central-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Montreal
    eu-central-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Frankfurt
    eu-west-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Ireland
    eu-west-2:
      AMI: ami-xxxxxxxxxxxxxxxxx    # London
    eu-west-3:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Paris
    sa-east-1:
      AMI: ami-xxxxxxxxxxxxxxxxx    # Sao Paulo

Resources:

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  # web server:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ UbuntuAMI, !Ref "AWS::Region", AMI]  # We lookup AMI in the region map
      InstanceType: t2.micro                      # Any instance type will do
      IamInstanceProfile: !Ref EC2InstanceProfile # Permissions
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true            # We will need a public IP address
        SubnetId: !Ref PublicSubnet               # We should sit in a public subnet.
        GroupSet: [ !Ref WebServerSecurityGroup ] # Attach the security group
      UserData:      #  This code installs a demo Java/Spring app as a systemd service.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the OS and get Java
          # These lines will work on Ubuntu, will simply fail on other distros:
          apt-get -qq update && sudo apt-get upgrade -y -qq
          apt-get -qq install wget java-common -y
          echo Installing Java:
          cd ~
          wget -q https://corretto.aws/downloads/resources/17.0.9.8.1/java-17-amazon-corretto-jdk_17.0.9.8-1_amd64.deb
          dpkg -i -E java-17-amazon-corretto-jdk_17.0.9.8-1_amd64.deb >/dev/null  

          echo Install and run the cloudwatch agent
          cd ~
          wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E ./amazon-cloudwatch-agent.deb  >/dev/null    
          cat <<EOF > amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "CloudWatch-Agent",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/spring-cloud-aws-environment-demo.log",
                      "log_group_name": "${CloudwatchLogsGroup}",
                      "log_stream_name": "Spring-Boot-App",
                      "timezone": "UTC"
                    }
                  ]
                }
              },
              "log_stream_name": "default-stream",
              "force_flush_interval" : 15
            }                  
          }
          EOF
          chmod o=r amazon-cloudwatch-agent.json
          sudo mv *.json /opt/aws/amazon-cloudwatch-agent/etc/
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

          echo Download Java/Spring app:
          cd ~
          wget -q https://kk-uploads-oregon.s3.us-west-2.amazonaws.com/spring-cloud-aws-environment-demo-17.jar
          mv *.jar app.jar
          chmod +x app.jar
          mkdir /var/app
          mv app.jar /var/app
          
          echo Run app as service by creating app.service file:
          cat > spring-boot-app.service <<EOF
          [Unit]
          Description=Spring Boot Demo
          
          [Service]
          SuccessExitStatus=143
          TimeoutStartSec=30
          TimeoutStopSec=10
          Restart=on-failure
          RestartSec=5
          ExecStart=/bin/sh -c "/usr/bin/java -jar /var/app/app.jar --server.port=80 >> /var/log/spring-cloud-aws-environment-demo.log"
          KillMode=control-group

          [Install]
          WantedBy=multi-user.target
          EOF
          mv spring-boot-app.service /etc/systemd/system/

          echo Run Java Spring app as service:
          systemctl daemon-reload
          systemctl enable spring-boot-app.service
          systemctl start spring-boot-app

  # Attach EC2Role's permissions to each EC2 Instance.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref InstanceRole]

  # EC2 instance will need to talk to SSM to read parameters:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2-SSM-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM  # Permissions for SSM Agent (session manager and such)
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy       # Permissions for CloudWatch Logs Agent

  # Explicit declaration of the LogGroup allows us to control its retention:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain  # Keep the logs around if the stack fails 
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-${LogGroupSuffix}
      RetentionInDays: 3

# Finally, what we should see when we are all done.  IP address of our website:
Outputs:
  WebServerIpAddress:
    Description: IP Address of the web server
    Value: !Sub http://${WebServer.PublicIp}

  SessionManagerLink:
    Description: Access instance via web browser
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${WebServer}?region=${AWS::Region}#  

  LogGroup:
    Description: Console access to CloudWatch Logs
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${CloudwatchLogsGroup}
