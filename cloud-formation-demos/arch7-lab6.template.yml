AWSTemplateFormatVersion: 2010-09-09

# Re-creates lab 6 from AWS Architecting 7

Parameters:

  WebsiteSuffix:
    Description: Suffix to be placed on the website bucket.
    Type: String
    Default: demonstration

Resources:

  # Bucket for website:
  S3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub website-${WebsiteSuffix}
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false

  # Contents of the bucket are publicly gettable:
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3
      PolicyDocument: 
        Statement: 
        - Effect: Allow                                                                       #  Allow ...
          Principal:
            AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI}   # ... the CloudFront distribution ...
          Action:                                                                             # ... to call GetObject ...
          - s3:GetObject
          Resource: !Sub arn:aws:s3:::${S3}/*                                                 # ... on any object in this S3 bucket.

  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: MyOriginAccessIdentity     # This can be any string value

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: 
        Comment: Pointing at S3 Bucket
        Enabled: true
        PriceClass: PriceClass_100    # Cheapest
        HttpVersion: http2
        DefaultRootObject: index.html
        Origins:
        - Id: S3Bucket
          DomainName: !GetAtt S3.RegionalDomainName   # Must be region specific to avoid redirect behavior when buckets are new
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAI}
        DefaultCacheBehavior:
          TargetOriginId: S3Bucket
          DefaultTTL: 30   # No caching
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https   # allow-all, redirect-to-https, https-only 

  # This role is used by the Lambda / custom resource for cleanup:
  CleanupCustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CleanupCustomResourceLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CleanupCustomResourceLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:List*
            - s3:Put*
            - s3:Delete*
            Resource: "*"

  # This function creates a sample web page on create and cleans out the bucket on stack delete.
  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-CleanupCustomResource
      Role: !GetAtt CleanupCustomResourceLambdaRole.Arn
      MemorySize: 128     
      Timeout: 15         
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          import boto3, json
          import cfnresponse
          
          def handler(event, context):
            # print(event)
            requestType = event["RequestType"]
            rp          = event['ResourceProperties']
            s3Bucket   = rp['s3Bucket']

            responseData = {}
            msg = ""
            try:
              if requestType == 'Create' or  requestType == 'Update':
                boto3.client('s3').put_object(Bucket=s3Bucket,Body='Hello World',Key='index.html',ContentType='text/html')

              if requestType == 'Delete':
                print ('Cleaning out S3 buckets to enable delete... ' )
                boto3.resource('s3').Bucket(s3Bucket).objects.all().delete()
                msg = "Bucket cleanup complete"

            except Exception as e:
              msg = f"Exception raised for function: Exception details: {e}"
              print(msg)
              responseData['Reason'] = msg
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, event["LogicalResourceId"]);
              
            # Unless something blew up, we should wander into this code:
            print(msg)
            responseData['Reason'] = msg
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event["LogicalResourceId"]);

  CleanupCustomResource:
    Type: Custom::cleanup
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      s3Bucket: !Ref S3


Outputs:
  TheURL:
    Description:  WARNING - There may be a delay until this URL is available
    Value: !Sub https://${CloudFront.DomainName}
