AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# Simple API Gateway / Lambda "Hello World" demo - with CORS enabled..
# SAM DOESN'T SUPPORT IN-LINE CODE.  Must be a Lambda deployment package: http://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html
# CODE MUST BE IN S3, MUST BE IN SAME REGION, AND MUST BE ZIPPED.
# Couldn't get this code to work.  Error is "Swagger Error" and that's all the info it gives.
Parameters:
  LambdaCodeBucket:
    Type: String
    Default: kk-uploads-oregon
    Description: S3 bucket containing your Lambda code.

  LambdaCodeKey:
    Type: String
    Default: lambda-helloworld.js.zip
    Description: key of your Zipped Lamda function code.

  SwaggerKey:
    Type: String
    Default: my-sam-cors-demo.swagger.yaml
    Description: key of your Swagger file which defines the API.

  Runtime:
    Type: String
    Default: nodejs18.x
    Description: Runtime of your zipped lambda code.
    AllowedValues: 
      - nodejs18.x
      - java8
      - python2.7
      - python3.6
      - dotnetcore1.0


Resources:

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: 
        Bucket: !Ref LambdaCodeBucket
        Key: !Ref SwaggerKey
      StageName: Prod
      Variables:
      #   # NOTE: Before using this template, replace the <<region>> and <<account>> fields
      #   #       in Lambda integration URI in the swagger file to region and accountId 
      #   #       you are deploying to
        # AccountId: !Ref "AWS::AccountId"
        # Region: !Ref "AWS::Region"
        LambdaFunctionName: !Ref MyLambda

  # This is a simple "hello world" style Lambda function.
  MyLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: MyLambda
      Description: Example Lambda from CloudFormation
      MemorySize: 128
      Timeout: 4
      Role: !GetAtt LambdaFunctionRole.Arn 
      Runtime: !Ref Runtime
      Handler: lambda-helloworld.justatest    # must match filename regardless of what AWS docs say.
      CodeUri: 
        Bucket: !Ref LambdaCodeBucket
        Key: !Ref LambdaCodeKey
      # Events section defines what triggers the Lambda
      Events:
        # This will define an API Gateway resource that will call our function on a GET to /.  
        MyApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: GET
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY


  # This Role allows the Lambda function to make API calls if needed.
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: BasicLambdaRole  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"

  # This Policy is attached to the LambdaFunctionRole.
  # Basic permissions for CloudWatch Logs, expand as needed.
  LambdaFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: LambdaFunctionPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
          Resource: "*"
      Roles: 
        -  !Ref LambdaFunctionRole   

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'