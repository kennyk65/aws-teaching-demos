AWSTemplateFormatVersion: '2010-09-09'
#  This private link demo was derived from the demo seen at:
#   https://aws.amazon.com/blogs/networking-and-content-delivery/how-to-use-aws-privatelink-to-secure-and-scale-web-filtering-using-explicit-proxy/
#
#  Instructions:
#  1. Run this CloudFormation template.  This was tested in us-west-2 but should work anywhere.
#  2. Find "ConsumerSessionManagerLink" in the stack output.  Open this in a new browser tab.  This is a session manager link to the 'consumer' instance.
#  3. Find "DnsName" in the stack output.  Use it to run a command like this:
#   curl 'http://<<DNS-NAME-GOES-HERE>>/api?value=2
#  
#  The request will be sent to the VPC Interface Endpoint, to the NLB, to an
#  Instance in the 'provider' VPC.  It will square the value and send it back.
#  
#  Optional: In the console, Go to VPC / Network Manager / Reachability Analyzer.
#  Enter source as consumer instance, target as provider instance.

Parameters:

  DockerImage:
    Type: String
    Default: public.ecr.aws/kkrueger/flask-api:1
    Description: Image to use for a container.  Can be from DockerHub or include registry URL for a different source (repository-url/image:tag). 

  AmazonLinuxAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: You probably won't need to change this value.  This is looking up the latest Amazon Linux 2 AMI using the Parameter Store...


Resources:

  #  Service PROVIDER network:
  ProviderVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: Service Provider VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ServiceProviderIGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ProviderVPC
      InternetGatewayId: !Ref InternetGateway

  ProviderPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProviderVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
      - Key: Name
        Value: Provider Public Subnet1

  ProviderPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProviderVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Provider Public Subnet2

  ProviderVPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProviderVPC
      Tags:
      - Key: Name
        Value: Provider VPC Public Route table

  ProviderVPCDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref ProviderVPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProviderVPCPublicRouteTable
      SubnetId: !Ref ProviderPublicSubnet1
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProviderVPCPublicRouteTable
      SubnetId: !Ref ProviderPublicSubnet2

  ProviderSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ProviderSG
      GroupDescription: Accepts traffic on 80
      VpcId: !Ref ProviderVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  ProviderLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-ProviderLaunchTemplate
      LaunchTemplateData: 
        ImageId: !Ref AmazonLinuxAMI    # Latest Amazon Linux 2
        InstanceType: t3.micro 
        IamInstanceProfile:
          Name: !Ref SSMInstanceProfile     # Allows EC2 Instance to talk with SSM
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true     # Needs public IP to update software, download image  
          Groups: [ !Ref ProviderSG ]
        UserData:                           # Starts a simple web app on port 80
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            service docker start
            docker pull ${DockerImage}
            docker run -d -p80:5000 ${DockerImage}   

  ProviderAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-ProviderASG
      VPCZoneIdentifier: [ !Ref ProviderPublicSubnet1, !Ref ProviderPublicSubnet2 ]
      LaunchTemplate:
        LaunchTemplateId: !Ref ProviderLaunchTemplate
        Version: !GetAtt ProviderLaunchTemplate.LatestVersionNumber        
      MinSize: 1        
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      TargetGroupARNs:  [ !Ref ProviderTargetGroup ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ProviderInstance
        PropagateAtLaunch: true

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ProviderNLB
      Type: network
      Scheme: internal
      Subnets: [!Ref ProviderPublicSubnet1, !Ref ProviderPublicSubnet2]

  ProviderListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Protocol: TCP
      Port: 80
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ProviderTargetGroup

  ProviderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-ProviderTG
      VpcId: !Ref ProviderVPC
      Port: 80
      Protocol: TCP

  # This is the CONSUMER network
  ConsumerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      Tags:
      - Key: Name
        Value: Service Consumer

  ConsumerInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ServiceConsumerIGW
  ConsumerInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ConsumerVPC
      InternetGatewayId: !Ref ConsumerInternetGateway

  ConsumerPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ConsumerVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      CidrBlock: 172.16.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Consumer Public Subnet1

  ConsumerVPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ConsumerVPC
      Tags:
      - Key: Name
        Value: Consumer Public RT

  ConsumerVPCDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ConsumerInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref ConsumerVPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ConsumerInternetGateway

  ConsumerPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ConsumerVPCPublicRouteTable
      SubnetId: !Ref ConsumerPublicSubnet1

  ConsumerEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ConsumerEndpointSG
      GroupDescription: Accepts traffic on incoming port 3218 from Provider VPCs- 172.16.0.0/16
      VpcId: !Ref ConsumerVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 172.16.0.0/16
        Description: Accept Only traffic from Service Consumer VPC - 172.16.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ConsumerEndpointSG


  Ec2ServiceConsumerHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinuxAMI                # Latest Amazon Linux 2
      InstanceType: t3.micro
      SubnetId: !Ref ConsumerPublicSubnet1
      IamInstanceProfile: !Ref SSMInstanceProfile     # Allows EC2 Instance to talk with SSM
      SecurityGroupIds:
      - !Ref ConsumerEndpointSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ConsumerInstance

  # Attach AmazonEC2RoleforSSM's permissions to each EC2 Instance in the ASG.
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SSMRole]

  # Allow EC2 instance to make calls to SSM, including session manager.
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  # PRIVATE LINK STARTS HERE!!
  # This is the Private Link VPC Endpoint Service.  This endpoint will be avalilable outside the Provider VPC to those who need to consume it.
  ProviderEndPointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      NetworkLoadBalancerArns:
      - !Ref NetworkLoadBalancer
      AcceptanceRequired: false

  # This is the Consumer endpoint.  It resides in the consumer VPC/Subnets and sends traffic to the Provider VPC Endpoint.
  ConsumerVPCEndpointLink:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ConsumerVPC
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.vpce.${AWS::Region}.${ProviderEndPointService}
      SubnetIds:
      - !Ref ConsumerPublicSubnet1
      SecurityGroupIds:
      - !Ref ConsumerEndpointSecurityGroup


Outputs:

  DnsName:
    Description: DNS Name of the VPC Endpoint.  
    Value: !Select [1, !Split [ ':', !Select [ 0, !GetAtt ConsumerVPCEndpointLink.DnsEntries ]]]

  ConsumerSessionManagerLink:
    Description: Access the service CONSUMER using web browser.  Then run a command like "curl 'https://v2.jokeapi.dev/joke/Any?format=json&safe-mode'"
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2ServiceConsumerHost}?region=${AWS::Region}#  

  ReachabilityAnalyzerLink:
    Description:  Convenient link to the Network Manager Reachability Analyzer.  Enter 'Consumer' instance as source and 'Provider' instance as target
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/networkinsights/home?region=${AWS::Region}#CreateNetworkPath
