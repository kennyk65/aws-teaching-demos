AWSTemplateFormatVersion: 2010-09-09

# Set up an EventBridge rule which captures all AssumeRole API calls on this account, except for those made by AWS services.  
# Trigger a Lambda when this happens.  Have it digest the event information and format a readable message.
# Use SNS to eMail this message to a given eMail address.
# Note:  RUN ON US-EAST-1 ONLY - This template will execute in any region, but AssumeRole events occur in us-east-1 only.

Parameters:
  EmailAddress:
    Description: Eamail address to send approval notifications to
    Type: String
    Default: somebodysemail@gmail.com

Resources:

  # Capture all AssumeRole events except those made by AWS services.  
  # Trigger the Lambda when this happens:
  EventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub rule-${AWS::StackName}
      # EventPattern: 
      #   '{"source":["aws.sts"],"detail-type":["AWS API Call via CloudTrail"],"detail":{"eventSource":["sts.amazonaws.com"],"eventName":["AssumeRole"],"userIdentity":{"type":[{"anything-but":["AWSService"]}]}}}'
      EventPattern: 
        source: [ "aws.sts" ]
        detail-type: ["AWS API Call via CloudTrail"]
        detail:
          eventSource: ["sts.amazonaws.com"]
          eventName: ["AssumeRole"]
          userIdentity:
            type: [{"anything-but":["AWSService"]}]
      State: ENABLED
      Targets:
      - Arn: !GetAtt LambdaFunction.Arn
        Id: ArbitraryValue

  # Allow Lambda function to write to CloudWatch Logs and send SNS notifications:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaRole-${AWS::StackName}
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal: 
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Description: Allow Lambda to write to log and send SNS messages

  # Allow EventBridge event to trigger Lambda function:
  FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventsRule.Arn

  # Format and eMail a nice message when the event is triggerred:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub function-${AWS::StackName}
      Description: Send the given eMail a message whenever a role is assumed on this account
      Environment:
        Variables:
          TOPIC_ARN: !Ref SNSTopic
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.13
      Timeout: 3
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              #print("Received event: " + json.dumps(event, indent=2))    
              
              type = event['detail']['userIdentity']['type']  
              arn = event['detail']['userIdentity']['arn']
              roleArn = event['detail']['requestParameters']['roleArn']
              time = event['time']

              message = "A userIdentity of type {}, {} assumed role {} at {} on this account.".format(type,arn,roleArn,time)
              print(message)

              # Send a message via SNS:
              client = boto3.client('sns')
              
              topicArn = os.getenv('TOPIC_ARN')
              response = client.publish(
                  TopicArn=topicArn,
                  Message=message,
                  Subject='AWS Notification - AssumeRole'
              )

  # SNS Topic with eMail subscription.  EMail address is an input parameter to this stack.
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Send notifications when an IAM role is assumed
      TopicName: !Sub topic-${AWS::StackName}

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref EmailAddress
      Protocol: email
      Region: !Ref AWS::Region

  # CloudWatch Logs Groups are created automatically once Lambdas write output,
  # but they are easier to cleanup when they are part of the stack.  
  # So make one:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: 3

