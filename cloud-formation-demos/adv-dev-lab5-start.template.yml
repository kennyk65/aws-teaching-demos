AWSTemplateFormatVersion: "2010-09-09"
Description: Advanced Developing on AWS - Lab 5 Template
Parameters:
  LabVPCCIDR:
      Description: CIDR Block for Lab VPC
      Type: String
      Default: 10.0.0.0/16
      AllowedValues:
        - 10.0.0.0/16
  PublicSubnet1Param:
      Description: Public Subnet 1
      Type: String
      Default: 10.0.10.0/24
      AllowedValues:
      - 10.0.10.0/24
  PublicSubnet2Param:
      Description: Public Subnet 2
      Type: String
      Default: 10.0.15.0/24
      AllowedValues:
        - 10.0.15.0/24
  PrivateSubnet1Param:
      Description: Private Subnet 1
      Type: String
      Default: 10.0.50.0/24
      AllowedValues:
        - 10.0.50.0/24
  PrivateSubnet2Param:
      Description: Private Subnet 2
      Type: String
      Default: 10.0.55.0/24
      AllowedValues:
        - 10.0.55.0/24
  AWSAccessKey:
      Description: Access key for our lab user.
      Type: String
  AWSSecretAccessKey:
      Description: Secret access key for our lab user.
      Type: String
  ParentLabName:
      Type: String
      Default: lab-3-Messaging
  LatestLinux2AMI:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
  LatestWindows2019AMI:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  KeyName:
      Type: String
      Description: Keyname for the keypair that Qwiklab will use to launch EC2 instances
      Default: "default-lab-key"
  LabUrlPrefix:
      Type: String
      Default: "http://us-west-2-tcprod.s3.amazonaws.com/courses/ILT-DD-300-ADVDEV/v1.0.0"
  #AWSAmiId:
      #Description: "The name of the Windows AMI to find based on search"
      #Type: String
      #Default: "x86_64,Windows_Server-2012-R2_RTM-English-64Bit-Base"
Resources:
  LabVPC:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock:
            Ref: LabVPCCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: VPC
            Value: Lab VPC
          - Key: Name
            Value: Lab VPC
  LabVPCInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: LabVPC
  LabVPCAttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
        VpcId:
          Ref: LabVPC
        InternetGatewayId:
          Ref: LabVPCInternetGateway
  LabVPCPublicSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabVPCAttachGateway
    Properties:
        VpcId:
          Ref: LabVPC
        CidrBlock:
          Ref: PublicSubnet1Param
        AvailabilityZone:
          "Fn::Select":
              - "0"
              - "Fn::GetAZs": ""
        Tags:
          - Key: Name
            Value: Lab VPC Public Subnet 1
  LabVPCPublicSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabVPCAttachGateway
    Properties:
        VpcId:
          Ref: LabVPC
        CidrBlock:
          Ref: PublicSubnet2Param
        AvailabilityZone:
          "Fn::Select":
              - "1"
              - "Fn::GetAZs": ""
        Tags:
          - Key: Name
            Value: Lab VPC Public Subnet 2
  LabVPCPrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabVPCAttachGateway
    Properties:
        VpcId:
          Ref: LabVPC
        CidrBlock:
          Ref: PrivateSubnet1Param
        AvailabilityZone:
          "Fn::Select":
              - "0"
              - "Fn::GetAZs": ""
        Tags:
          - Key: Name
            Value: Lab VPC Private Subnet 1
  LabVPCPrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabVPCAttachGateway
    Properties:
        VpcId:
          Ref: LabVPC
        CidrBlock:
          Ref: PrivateSubnet2Param
        AvailabilityZone:
          "Fn::Select":
              - "1"
              - "Fn::GetAZs": ""
        Tags:
          - Key: Name
            Value: Lab VPC Private Subnet 2
  LabVPCPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
        - LabVPCAttachGateway
    Properties:
        VpcId:
          Ref: LabVPC
        Tags:
          - Key: Name
            Value: LabVPC Public Route Table
  LabVPCPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
        - LabVPCAttachGateway
    Properties:
        RouteTableId:
          Ref: LabVPCPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: LabVPCInternetGateway
  LabVPCPublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
        - LabVPCAttachGateway
    Properties:
        SubnetId:
          Ref: LabVPCPublicSubnet1
        RouteTableId:
          Ref: LabVPCPublicRouteTable
  LabVPCPublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
        - LabVPCAttachGateway
    Properties:
        SubnetId:
          Ref: LabVPCPublicSubnet2
        RouteTableId:
          Ref: LabVPCPublicRouteTable
  LabVPCPrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
        VpcId:
          Ref: LabVPC
        Tags:
          - Key: Name
            Value: LabVPC Private Route Table
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref LabVPCPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance
  LabVPCPrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
        SubnetId:
          Ref: LabVPCPrivateSubnet1
        RouteTableId:
          Ref: LabVPCPrivateRouteTable
  LabVPCPrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
        SubnetId:
          Ref: LabVPCPrivateSubnet2
        RouteTableId:
          Ref: LabVPCPrivateRouteTable
  NATSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: LabVPCAttachGateway
    Properties:
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 1024
          CidrIp: !Ref PrivateSubnet1Param
        - IpProtocol: udp
          FromPort: 0
          ToPort: 1024
          CidrIp: !Ref PrivateSubnet1Param
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 1024
          CidrIp: !Ref PrivateSubnet2Param
        - IpProtocol: udp
          FromPort: 0
          ToPort: 1024
          CidrIp: !Ref PrivateSubnet2Param
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  NATInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - LabVPCAttachGateway
      - LabVPCPublicRoute
      - LabVPCPublicSubnet2
    Properties:
      ImageId: !Ref LatestLinux2AMI
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref LabVPCPublicSubnet1
          GroupSet:
            - !Ref NATSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT
      UserData: !Base64 
        'Fn::Join':
          - |+
          - - '#!/bin/bash'
            - yum -y update
            - yum install -y mysql
            - echo 1 > /proc/sys/net/ipv4/ip_forward
            - echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
            - >-
              /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j
              MASQUERADE
            - /sbin/iptables-save > /etc/sysconfig/iptables
            - mkdir -p /etc/sysctl.d/
            - cat <<EOF > /etc/sysctl.d/nat.conf
            - net.ipv4.ip_forward = 1
            - net.ipv4.conf.eth0.send_redirects = 0
            - |
              EOF 

  DevInstanceLinuxSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: LabVPCAttachGateway
    Properties:
        GroupDescription: Security Group for Linux instance
        VpcId:
          Ref: LabVPC
        Tags:
          - Key: Name
            Value: Linux Dev Instance SG
          - Key: InstanceType
            Value: General
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
  DevInstanceLinuxWaitHandle01:
    Type: "AWS::CloudFormation::WaitConditionHandle"
    Properties: {}
  DevInstanceLinuxWaitCondition01:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: DevInstanceLinux
    Properties:
        Handle:
          Ref: DevInstanceLinuxWaitHandle01
        Timeout: "1800"
  DevInstanceLinux:
    Type: "AWS::EC2::Instance"
    DependsOn:
        - LabVPCAttachGateway
    Properties:
        KeyName:
          Ref: KeyName
        IamInstanceProfile:
          Ref: GetS3BucketsInstanceProfile
        ImageId: !Ref LatestLinux2AMI
        InstanceType: t2.small
        NetworkInterfaces:
          - DeviceIndex: "0"
            AssociatePublicIpAddress: true
            SubnetId:
                Ref: LabVPCPublicSubnet1
            GroupSet:
                - Ref: DevInstanceLinuxSecurityGroup
        Tags:
          - Key: Name
            Value: Dev Instance - Linux
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash -ex
              yum -y update
              mkdir /home/ec2-user/.aws
              cat > /home/ec2-user/.aws/config <<EOF
              [profile aws-lab-env]
              region = ${AWS::Region}
              EOF
              cat > /home/ec2-user/.aws/credentials <<CREDEOF
              [aws-lab-env]
              aws_access_key_id=${AWSAccessKey}
              aws_secret_access_key=${AWSSecretAccessKey}
              CREDEOF
              wget ${LabUrlPrefix}/${ParentLabName}/scripts/install-devenv.sh
              chmod 700 install-devenv.sh
              ./install-devenv.sh ${LabUrlPrefix} ${ParentLabName} ${DevInstanceWindows.PrivateIp} ${GeneratePassword.password}
              /opt/aws/bin/cfn-signal -s true '${DevInstanceLinuxWaitHandle01}'
  DevInstanceWindowsWaitHandle01:
    Type: "AWS::CloudFormation::WaitConditionHandle"
    Properties: {}
  DevInstanceWindowsWaitCondition01:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: DevInstanceWindows
    Properties:
        Handle:
          Ref: DevInstanceWindowsWaitHandle01
        Timeout: "3600"
  DevInstanceWindowsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: LabVPCAttachGateway
    Properties:
        GroupDescription: Security Group for Windows instance
        VpcId:
          Ref: LabVPC
        Tags:
          - Key: Name
            Value: Windows Dev Instance - SG
          - Key: InstanceType
            Value: General
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 0.0.0.0/0
  DevInstanceWindows:
    Type: "AWS::EC2::Instance"
    DependsOn:
        - LabVPC
        - LabVPCAttachGateway
        - LabVPCPublicRoute
    Properties:
        KeyName:
          Ref: KeyName
        IamInstanceProfile:
          Ref: GetS3BucketsInstanceProfile
        ImageId: !Ref LatestWindows2019AMI
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
                VolumeSize: 60
                VolumeType: gp2
        InstanceType: m4.large
        NetworkInterfaces:
          - DeviceIndex: "0"
            AssociatePublicIpAddress: true
            SubnetId:
                Ref: LabVPCPublicSubnet2
            GroupSet:
                - Ref: DevInstanceWindowsSecurityGroup
        Tags:
          - Key: Name
            Value: Dev Instance - Windows
        UserData:
          Fn::Base64: 
              Fn::Join: [
                "",
                [
                    "<powershell>\n",
                    "$ErrorActionPreference = 'Stop'\n",
                    "$success = 'true'\n",
                    "$message = 'Lab configuration succeeded.'\n",
                    "try {\n",
                    "net user Administrator '",
                    {
                    "Fn::GetAtt": [ "GeneratePassword", "password" ]
                    },
                    "'\n",
                    "New-Item -ItemType directory -Path 'C:\\temp', 'C:\\temp\\aws'\n",
                    "$webclient = New-Object System.Net.WebClient\n",
                    "$webclient.DownloadFile('https://s3.amazonaws.com/aws-cli/AWSCLI64.msi','C:\\temp\\aws\\AWSCLI64.msi')\n",
                    "Start-Process 'C:\\temp\\aws\\AWSCLI64.msi' -ArgumentList /qn -Wait\n",
                    "$env:Path = $env:Path + \";C:\\Program Files\\Amazon\\AWSCLI\\\"\n",
                    "New-Item -ItemType directory -Path 'C:\\Users\\Administrator\\.aws'\n",
                    "$ConfigSet = @\"\r\n",
                    "[profile aws-lab-env]\r\n",
                    "region = ",
                    {
                    "Ref": "AWS::Region"
                    },
                    "\r\n",
                    "\"@\r\n",
                    "New-Item -ItemType file -Path 'C:\\Users\\Administrator\\.aws\\config' -Value $ConfigSet\n",
                    "$Credentials = @\"\r\n",
                    "[aws-lab-env]\r\n",
                    "aws_access_key_id=",
                    {
                    "Ref": "AWSAccessKey"
                    },
                    "\r\n",
                    "aws_secret_access_key=",
                    {
                    "Ref": "AWSSecretAccessKey"
                    },
                    "\r\n",
                    "\"@\r\n",
                    "New-Item -ItemType file -Path 'C:\\Users\\Administrator\\.aws\\credentials' -Value $Credentials\n",
                    "\n",
                    "$webClient = new-object net.webclient\n",
                    "$webClient.downloadFile('",{"Ref":"LabUrlPrefix"},"/",{"Ref" : "ParentLabName"},"/scripts/install-devenv.ps1', 'c:\\temp\\aws\\install-devenv.ps1')\n",
                    "cd c:\\temp\\aws\n",
                    ".\\install-devenv.ps1 \"", {
                    "Ref" : "LabUrlPrefix"
                    }, "\" \"", {
                    "Ref" : "ParentLabName"
                    }, "\"\n",
                    "} catch {\n",
                    "$success='false'\n",
                    "$message=$_.Exception\n",
                    "add-content c:\\temp\\aws\\install-log.txt 'Exception was thrown - details below:'\n",
                    "$_.Exception | format-list -force >> c:\\temp\\aws\\install-log.txt\n",
                    "} finally {\n",
                    "cfn-signal.exe -s $success '",
                    {
                    "Ref": "DevInstanceWindowsWaitHandle01"
                    },
                    "' -r \"$message\"\n",
                    "restart-computer -force\n",
                    "}\n",
                    "</powershell>"
                ]
              ]
  GeneratePasswordLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
              - 
                Effect: Allow
                Principal:
                  Service:
                      - lambda.amazonaws.com
                Action:
                  - "sts:AssumeRole"
        Path: /
        Policies:
          - 
              PolicyName: root
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - 
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "arn:aws:logs:*:*:*"
                    - 
                      Effect: Allow
                      Action:
                          - "secretsmanager:GetRandomPassword"
                      Resource: "*"
  GeneratePasswordFunction:
    Type: "AWS::Lambda::Function"
    Properties:
        Code:
          ZipFile: >
                var response = require('cfn-response');
                var AWS = require('aws-sdk');
                exports.handler = function(event, context) {
                      var responseData = {};
                      var params = {
                          PasswordLength: 12,
                          ExcludePunctuation: true,
                          RequireEachIncludedType: true
                      };
                      var secretsmanager = new AWS.SecretsManager({region: 'us-east-1'});
                      secretsmanager.getRandomPassword(params, function(err, data) {
                          if (err) {
                            responseData = {Error: 'SecretsManager getRandomPassword failed'};
                            console.log(responseData.Error + ":",  err.stack);
                            response.send(event, context, response.ERROR, responseData);
                          } else {
                            responseData['password'] = data.RandomPassword;
                            console.log(responseData['password']);
                            response.send(event, context, response.SUCCESS, responseData);
                          }
                      });
                };
        Handler: index.handler
        Runtime: nodejs8.20
        Timeout: 30
        Role:
          Fn::GetAtt :
              - GeneratePasswordLambdaExecutionRole
              - Arn
  GeneratePassword:
    Type: "Custom::GeneratePassword"
    Properties:
        ServiceToken:
          Fn::GetAtt :
              - GeneratePasswordFunction
              - Arn
        Region:
          Ref: AWS::Region
  GetS3BucketsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
        Path: /
        Roles:
          - Ref: GetS3BucketsRole
  GetS3BucketsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: GetS3BucketsPolicy
        PolicyDocument:
          Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
        Roles:
          - Ref: GetS3BucketsRole
  GetS3BucketsRole:
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
              - Effect: Allow
                Principal:
                  Service:
                      - ec2.amazonaws.com
                Action:
                  - "sts:AssumeRole"
        Path: /
  LambdaKinesisToSQSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaKinesisToSQSRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaKinesisToSQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:*'
                  - 'sqs:*'
                  - 'kinesis:*'
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource: '*'
  microservicesDrawQueueFIFO:
    Properties:
      QueueName: microservices_drawqueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
    Type: 'AWS::SQS::Queue'
  microservicesDrawQueueStandard1:
    Properties:
      QueueName: microservices_drawqueue_1
    Type: 'AWS::SQS::Queue'
  microservicesDrawQueueStandard2:
    Properties:
      QueueName: microservices_drawqueue_2
    Type: 'AWS::SQS::Queue'
  microservicesDrawQueueStandard3:
    Properties:
      QueueName: microservices_drawqueue_3
    Type: 'AWS::SQS::Queue'
  CIPMessageDraw:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: microservices_Messaging
      AllowUnauthenticatedIdentities: true
  microservicesDrawTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - microservicesDrawQueueStandard1
            - Arn
          Protocol: sqs
        - Endpoint: !GetAtt 
            - microservicesDrawQueueStandard2
            - Arn
          Protocol: sqs
        - Endpoint: !GetAtt 
            - microservicesDrawQueueStandard3
            - Arn
          Protocol: sqs
      TopicName: microservicesMessageDuplicator
  KinesisStreamDrawingData:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: microservicesDrawingData
      RetentionPeriodHours: 24
      ShardCount: 1
  CognitoRolesAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref CIPMessageDraw
      Roles:
        unauthenticated: !GetAtt 
          - CognitoIAMUnauthenticatedRole
          - Arn
        authenticated: !GetAtt 
          - CognitoIAMAuthenticatedRole
          - Arn
  CognitoIAMUnauthenticatedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CIPMessageDraw
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Path: /
      Policies:
        - PolicyName: StandardCognito
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource:
                  - '*'
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource:
                  - !Ref microservicesDrawTopic
        - PolicyName: KinesisPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                Resource:
                  - !GetAtt 
                    - KinesisStreamDrawingData
                    - Arn
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:*'
                Resource:
                  - !GetAtt 
                    - microservicesDrawQueueStandard1
                    - Arn
                  - !GetAtt 
                    - microservicesDrawQueueStandard2
                    - Arn
                  - !GetAtt 
                    - microservicesDrawQueueStandard3
                    - Arn
                  - !GetAtt 
                    - microservicesDrawQueueFIFO
                    - Arn
        - PolicyName: IoTPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iot:Connect'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'iot:Publish'
                  - 'iot:Receive'
                Resource:
                  - 'arn:aws:iot:*:*:topic/microservices/drawingdemo'
              - Effect: Allow
                Action:
                  - 'iot:Subscribe'
                Resource:
                  - 'arn:aws:iot:*:*:topicfilter/microservices/drawingdemo'
  CognitoIAMAuthenticatedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CIPMessageDraw
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: StandardCognito
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource:
                  - '*'
  SQSPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: AllowAll
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal: '*'
            Action:
              - 'sqs:SendMessage'
              - 'sqs:ReceiveMessage'
            Resource: '*'
      Queues:
        - !Ref microservicesDrawQueueStandard1
        - !Ref microservicesDrawQueueStandard2
        - !Ref microservicesDrawQueueStandard3
        - !Ref microservicesDrawQueueFIFO

Outputs:
  # LabVPCId:
  #   Value:
  #       Ref: LabVPC
  # LabVPCPublicSubnet2:
  #   Value:
  #       Ref: LabVPCPublicSubnet2
  # LinuxInstanceId:
  #   Value:
  #       Ref: DevInstanceLinux
  # WindowsInstanceId:
  #   Value:
  #       Ref: DevInstanceWindows
  # DevInstanceWindowsSecurityGroup:
  #   Value:
  #       Ref: DevInstanceWindowsSecurityGroup
  # DevInstanceLinuxSecurityGroup:
  #   Value:
  #       Ref: DevInstanceLinuxSecurityGroup
  GuacamoleLink:
    Value: !Sub |
        http://${DevInstanceLinux.PublicIp}/guacamole/
  WindowsInstanceIP:
    Value: !Sub |
        ${DevInstanceWindows.PublicIp}
  WindowsPassword:
    Value:
        Fn::GetAtt :
          - GeneratePassword
          - password
  QueueUrl1:
    Description: SQS.Standard.QueueUrl
    Value: !Ref microservicesDrawQueueStandard1
  QueueUrl2:
    Description: SQS.Secondary.QueueUrl
    Value: !Ref microservicesDrawQueueStandard2
  QueueUrl3:
    Description: SQS.Tertiary.QueueUrl
    Value: !Ref microservicesDrawQueueStandard3
  FIFOQueueUrl:
    Description: SQS.FIFO.QueueUrl
    Value: !Ref microservicesDrawQueueFIFO
  TopicARN:
    Description: SNS.TopicARN
    Value: !Ref microservicesDrawTopic
  CognitoIdentityPoolId:
    Description: Cognito.IdentityPoolId
    Value: !Ref CIPMessageDraw