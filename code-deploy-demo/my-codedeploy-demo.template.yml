---
AWSTemplateFormatVersion: '2010-09-09'

# Setting up a simple EC2 environment behind a load balancer in which to install
# the CodeDeploy agent plus basic java spring app to upgrade. 
# TODO:  Setup CloudWatch Logs on the EC2 instances.  
#   The script to do this is already in UserData, BUT this script does not work on Amazon Linux 2.  
#   Switching back to Amazon Linux 1 gets CloudWatch logs working, but breaks the way the Java service is started and updated, and I don't have time for that right now.  
#   Support ticket opened to try to get the python script working: https://console.aws.amazon.com/support/cases?region=us-west-2#/6328474171/en

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC in which you want to run your demo instances.  Make sure it has public subnets.
  
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select two or more subnets (public) to be used by the Load Balancer's nodes.  Make sure it is in the selected VPC.  Sorry, I can't restrict this list by the VPC you just selected.
  
  InstancesKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access.  You shouldn't need to do any SSH access, but just in case.
  
  DesiredCapacity:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 4
    Description: Choose from 1 to 4, the number of web server instances you wish to launch in the auto-scale group.    
      
  AmazonLinuxAMI:
    Type:  AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    # Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs
    Description: You probably won't need to change this value.  This is looking up the latest AMI using the Parameter Store...

  LogGroupName:
    Description: The name of the CloudWatch log group that you want the CloudWatch agent to log to.
    Type: String
    Default: CodeDeployDemo

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please Enter:"
        Parameters: 
          - VpcId
          - Subnets
          - InstancesKeyName
          - DesiredCapacity
          - LogGroupName
          - AmazonLinuxAMI


Resources:

  # Security Group for the web server.  Allow HTTP and SSH from anywhere:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web server
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebServerSecurityGroup 
      - Key: ResourceGroup
        Value: CloudFormationResource
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0


  # Launch Configuration for our web server running within an ASG:            
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmazonLinuxAMI     # We lookup AMI from the SSM parameter
      KeyName: !Ref InstancesKeyName       # We get the keypair name from the input parameters
      InstanceType: t2.micro                    # Any instance type will do
      IamInstanceProfile: !Ref InstanceProfile       # Allows CodeDeploy agent to work
      SecurityGroups: [ !Ref WebServerSecurityGroup ]    # Plug in the security group.
      UserData:      #  This code installs 1) CodeDeploy agent 2) a demo Java/Spring app.  Then it signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby wget awslogs java-17-amazon-corretto 

          echo Install CodeDeploy agent:
          cd /home/ec2-user
          wget -q https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start

          echo Install and run the cloudwatch agent
          yum install -y amazon-cloudwatch-agent
          cd ~
          cat <<EOF > amazon-cloudwatch-agent.json
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "log_group_name": "${LogGroupName}",
                      "log_stream_name": "demo-amazon-cloudwatch-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/app/spring-cloud-aws-environment-demo.log",
                      "log_group_name": "${LogGroupName}",
                      "log_stream_name": "spring-cloud-aws-environment-demo.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              },
              "log_stream_name": "default-stream",
              "force_flush_interval" : 15
            }                  
          }
          EOF
          chmod o=r amazon-cloudwatch-agent.json
          sudo mv amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

          echo Download and start Java/Spring app, signal completion:
          wget -q https://kk-uploads-oregon.s3.us-west-2.amazonaws.com/zero-downtime-old-17.jar
          mv *.jar app.jar
          chmod +x app.jar
          mkdir /var/app
          mv app.jar /var/app
          
          echo Run app as service by creating app.service file:
          cat > spring-boot-app.service <<EOF
          [Unit]
          Description=Spring Boot Demo
          
          [Service]
          SuccessExitStatus=143
          TimeoutStartSec=30
          TimeoutStopSec=10
          Restart=on-failure
          RestartSec=5
          ExecStart=/bin/sh -c "/usr/bin/java -jar /var/app/app.jar --server.port=80 >> /var/log/spring-cloud-aws-environment-demo.log"
          KillMode=control-group

          [Install]
          WantedBy=multi-user.target
          EOF
          mv spring-boot-app.service /etc/systemd/system/

          echo Run Java Spring app as service:
          systemctl daemon-reload
          systemctl enable spring-boot-app.service
          systemctl start spring-boot-app

          echo  Signal CloudFormation that we are complete:
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}
        

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1        # Minimum = 1 & Max = 1 means always keep 1 running :-)
      MaxSize: 4
      DesiredCapacity: !Ref DesiredCapacity       # Parameter at top limits this to max of 4
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:  [ !Ref ALBTargetGroup ]
      Tags:
      - Key: Name
        Value: WebServer
        PropagateAtLaunch: true
    # This creation policy is saying, 'this resource is not really created until you get 1 signal back'.
    # Best to make the number of signals match the minimum or desired capacity of the ASG.
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT5M
        
  # An Application Load Balancer, with all of its sub-components:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-Alb
      Scheme: internet-facing
      Subnets: !Ref Subnets
      SecurityGroups: [!Ref WebServerSecurityGroup ]
  # Listen on port 80, pass all traffic to our only TargetGroup:
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
  # TargetGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-AlbTargetGroup
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2 
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds   # Let's try to speed this thing up a bit.
        Value: 10


  # Attach A role to the EC2 instance to allow the CodeDeploy agent to pull stuff from S3.
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref CodeDeployAgentRole]

  # Allow EC2 instance's agent to make calls to S3 and CodeDeploy.
  CodeDeployAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      # Note that any other policies required for the instance to do its job would be defined here as well. 

  # CodeDeploy application:
  MyDemoCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: MyDemoCodeDeployApplication  
      ComputePlatform: Server

  MyDemoCodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref MyDemoCodeDeployApplication
      AutoScalingGroups: [ !Ref AppAutoScalingGroup ]
      #Deployment:                                        # Ironically, giving a deployment group a name makes it so you can't update it.  Go figure.
      #  Deployment
      DeploymentConfigName: CodeDeployDefault.OneAtATime  # CodeDeployDefault.HalfAtATime
      DeploymentStyle:                                    # Let's do a rolling deploy behind a load balancer.
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      #Ec2TagFilters:                                     # We can identify instance by tags, but not needed for our demo.
      #  - Ec2TagFilters
      LoadBalancerInfo: 
        TargetGroupInfoList: 
        - Name: !GetAtt ALBTargetGroup.TargetGroupName
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn


  # This role allows CodeDeploy to mess with Load Balancers and ASGs on our behalf:
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeDeployRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

# TODO: Need to come up with an example of a Deployment object that contains info on how to deploy the new  version.
# May be on a file somewhere like in GitHub.  If we use the Deployment tag in the DeploymentGroup, it gets automatically run, which isn't a good demo.

# Finally, what we should see when we are all done.  The ELB's DNS name is the URL of our website:
Outputs:
  ELBEndpoint:
    Description: The URL for our Elastic Load Balancer.
    Value: !Sub http://${ALB.DNSName}
