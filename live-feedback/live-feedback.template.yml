AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# Run this CloudFormation tempate in any region.  
# Access the web application via the Website URL output of your stack.

Parameters:
  WebsiteS3BucketName:
    Description:  The name of the S3 bucket which will be created to host your website.  Must be globally unique.  
    Type:  String
    Default:  kk-feedback

  WebsiteCodeUrl:
    Description:  Location to download code from.  You can probably just let this Default
    Type: String
    Default:  https://kk-uploads-oregon.s3.amazonaws.com/LiveFeedback.zip

  UseAlarm:
    Type: String
    AllowedValues: 
    - True
    - False
    Default: False
    Description: Do you want to setup an alarm and notification?  

  NotificationPhoneNumber:
    Description:  Cell Phone / SMS Number to be contacted at.  
    Type:  String
    Default:  "+14072223333"

Conditions:
  ImplementAlarm:           !Equals [ !Ref UseAlarm, True ] 


Globals:
  Api:
    # Allow cross origin calls to the API Gateway:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

  # This Role allows the Lambda function to make API calls if needed.
  RoleFeedbackLambda:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-RoleFeedbackLambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the LambdaFunctionRole.
  # Basic permissions for CloudWatch Logs, expand as needed.
  PolicyFeedbackLambda:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-FeedbackLambdaPolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - cloudwatch:putMetric*
          Resource: "*"
      Roles: 
      -  !Ref RoleFeedbackLambda

              
  # This Role gives permission to our custom resource Lambda.
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-CustomResourceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  # This Policy is attached to the CustomResourceRole.
  # Basic permissions for CloudWatch Logs, plus S3.
  CustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CustomResourcePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Action: 
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:Put*
            - s3:List*
            - s3:Delete*
          Resource: "*"
      Roles: 
        -  !Ref CustomResourceRole   

  # Website bucket.  Pages served from here.  
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${WebsiteS3BucketName}
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false   
        RestrictPublicBuckets: false

  # This policy allows anyone in the world to make GET requests against the bucket.
  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument: 
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource: !Sub ${WebsiteS3Bucket.Arn}/*
          Principal: "*"

  # NodeJS function is fired by API gateway whenever someone enters a Feedback value:
  FeedbackLambda:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: LiveFeedback
      Description: Called from website, registers Feedback level.
      MemorySize: 128
      Timeout: 4
      Role: !GetAtt RoleFeedbackLambda.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      InlineCode: !Sub |
        console.log('Loading function');
        const aws = require('aws-sdk');
        const cloudwatch = new aws.CloudWatch();
        
        exports.handler = (event, context, callback) => {
          // console.log('Received event:', JSON.stringify(event, null, 2));
          var obj = JSON.parse( event.body );
          if (obj.student === "") obj.student = 'anonymous';
          console.log('incoming ' + obj.metric + ' level is ' + obj.level + ' for student "' + obj.student + '"');

          // Log to CloudWatch (TODO: SPEED UP THIS CALL):
          cloudwatch.putMetricData(
            { 'Namespace': 'LiveFeedback',
              'MetricData': [ {
                'MetricName': obj.metric,
                'Value': obj.level
              //  ,
              //  'Dimensions': [ {
              //      'Name': 'student',
              //      'Value': obj.student
              //  } ]
              } ]
            }, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });

          // return the JSON result to the caller of the Lambda function.
          // Since API Gateway calls Lambda using Proxy mode, this code must set the CORS headers.
          callback(
            null, 
            {   "statusCode": 201,
                "headers": {
                    "Access-Control-Allow-Headers": '*',
                    "Access-Control-Allow-Origin": '*',
                    "Access-Control-Allow-Methods": 'GET,PUT,OPTIONS'		    
                }
              }
            );
        };
      # Events section defines what triggers the Lambda
      Events:
        # This will define an API Gateway resource that will call our function on a PUT to /
        # The SAM stuff will transform this into all of the required API gateway components.
        # Good thing too because they are almost impossible to define using regular cloud formation.
        MyApi:
          Type: Api
          Properties:
            Path: /
            Method: PUT

  # Fire alarm when students complain about slow speed:
  TooSlowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when Speed goes below 20%
      Namespace: LiveFeedback
      MetricName: speed
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicSlowSpeed

  # Fire alarm when students complain about fast speed:
  TooFastAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when Speed goes above 80%
      Namespace: LiveFeedback
      MetricName: speed
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicFastSpeed

  # Students complain that there is not enough detail
  DepthLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when depth goes below 20%
      Namespace: LiveFeedback
      MetricName: depth
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicLowDepth

  # Students say there is too much detail
  DepthHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when depth goes above 80%
      Namespace: LiveFeedback
      MetricName: depth
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicHighDepth

  # Students complain that content is not applicable
  ApplicabilityLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when applicability goes below 20%
      Namespace: LiveFeedback
      MetricName: applicability
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicLowApplicability

  # High applicability is not a problem!!

  # Students complain there is not enough lab time
  LabTimeLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when labtime goes below 20%
      Namespace: LiveFeedback
      MetricName: labtime
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicLowLabTime

  # Students say there is too much lab time
  LabTimeHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when labtime goes above 80%
      Namespace: LiveFeedback
      MetricName: labtime
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicHighLabTime

  # Students are bored
  InterestLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when interest goes below 20%
      Namespace: LiveFeedback
      MetricName: interest
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicLowInterest
        
  # High interest level is a good thing!

  # Students overall satisfaction is low
  SatisfactionLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ImplementAlarm
    Properties:
      AlarmDescription: Fire alarm when satisfaction goes below 20%
      Namespace: LiveFeedback
      MetricName: satisfaction
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      EvaluationPeriods: 1
      Period: 60
      AlarmActions:
        - !Ref SnsTopicLowSatisfaction

  # High satisfaction is what we are trying to get!!

  # Topics to send text alerts to:
  SnsTopicSlowSpeed:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Speed Too Slow 
      TopicName: SlowSpeedAlert
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicFastSpeed:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Speed Too Fast 
      TopicName: FastSpeedAlert
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicLowDepth:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Coverage Too Basic 
      TopicName: LowDepth
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicHighDepth:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Detail Too Excessive 
      TopicName: HighDepth
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicLowApplicability:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Low Applicability` 
      TopicName: LowApplicability
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicLowLabTime:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Not Enough Lab Time 
      TopicName: LowLabTime
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicHighLabTime:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Too Much Lab Time
      TopicName: HighLabTime
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicLowInterest:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Students Are Bored` 
      TopicName: LowInterest
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms

  SnsTopicLowSatisfaction:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Student Satisfaction Low 
      TopicName: LowSatisfaction
      Subscription:
        - Endpoint: !Ref NotificationPhoneNumber
          Protocol: sms



  # This function will setup the web content in our S3 web bucket
  CustomResourceWebContentLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudwatchLogsGroupCustomResource
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-WebContentCustomResourceee
      Description: Populates S3 bucket with web content for our app.
      Role: !GetAtt CustomResourceRole.Arn
      MemorySize: 128     
      Timeout: 15         # Uploads and downloads take a bit of time.
      Runtime: python3.13
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from zipfile import ZipFile 
          import json
          import os
          import cfnresponse
          import mimetypes
          import boto3
          import urllib.request

          print('Loading function')

          # Entry point:
          def lambda_handler(event, context):
            
              # print("Received event: " + json.dumps(event, indent=2))

              # Get the CloudFormation request type
              requestType = event['RequestType']
              rp            = event['ResourceProperties']
              downloadUrl     = rp['downloadUrl']
              apiGatewayUrl     = rp['apiGatewayUrl']
              destinationBucket   = rp['destinationBucket']

              unzip_location  = "/tmp/web"
              responseData = {}
              s3 = boto3.client('s3')

              if requestType == 'Create' or requestType == 'Update':
                try:
                    print ('Downloading... ' )
                    zip_file_name, headers = urllib.request.urlretrieve(downloadUrl)          

                    print ('Unzipping...' )
                    try:
                        with ZipFile(zip_file_name, 'r') as zip: 
                            zip.extractall(unzip_location) 
                    except Exception as e:
                        msg = 'Error extracting {} to {}.  Exception is {}.'.format(zip_file_name,unzip_location,e)
                        print(msg)
                        responseData['Reason'] = msg
                        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                        return

                    html_file_name = "/tmp/web/index.html"
                    print('Altering contents of {}...'.format(html_file_name))
                    data = ""
                    # Read the file contents into memory:
                    with open(html_file_name,'r') as f:
                        data = f.read()

                    # Search and replace:
                    print('Altering...')
                    data = data.replace("API_GATEWAY_URL",apiGatewayUrl)

                    # Save
                    print('Saving...')
                    with open(html_file_name,'w') as f:
                        f.write(data)

                    print ('Uploading {} to {}'.format(unzip_location,destinationBucket))
                    for root,dirs,files in os.walk(unzip_location):
                        for file in files:
                            mime_type = mimetypes.guess_type(file)[0]
                            if mime_type is None:
                                mime_type = "binary/octet-stream"
                            prefix = root.replace(unzip_location,"",1)
                            if len(prefix) > 0:
                                prefix = prefix + '/'
                            print("uploading from {} to {}".format(os.path.join(root,file),prefix+file))
                            s3.upload_file(os.path.join(root,file),destinationBucket,prefix + file,ExtraArgs={'ContentType': mime_type})
                    print ('Upload complete.')

                except Exception as e:
                    msg = 'Error occurred while setting up web content.  Exception is {}.'.format(repr(e))
                    print(msg)
                    responseData['Reason'] = msg
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                    return

              if requestType == 'Delete':
                print ('Clean out bucket to enable delete... ' )
                boto3.resource('s3').Bucket(destinationBucket).objects.all().delete()

              # Unless something blew up, we should wander into this code:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  # This custom resource calls our Lambda function:
  HelperCustomResourceWebContentLambda:
    Type: Custom::helper
    DependsOn: CustomResourcePolicy     # Dont try running the custom resource until the policy is set.
    Properties:
      ServiceToken: !GetAtt CustomResourceWebContentLambda.Arn
      apiGatewayUrl: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}/
      destinationBucket: !Ref WebsiteS3Bucket
      downloadUrl:  !Ref WebsiteCodeUrl 

  # CloudWatch Logs Groups are created automatically once Lambdas write output,
  # but they are easier to cleanup when they are part of the stack.  
  # So make one for each Lambda function:
  CloudwatchLogsGroupFeedback:
    Type: AWS::Logs::LogGroup
  # DeletionPolicy: Retain  # Great for debugging, but causes trouble in general use when a stack name is reused within 3 days.
    Properties:
      LogGroupName: !Sub /aws/lambda/${FeedbackLambda}
      RetentionInDays: 3

  CloudwatchLogsGroupCustomResource:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-WebContentCustomResource
      RetentionInDays: 3
 

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Please supply the following"
        Parameters: 
          - WebsiteS3BucketName
          - WebsiteCodeUrl
      - Label: 
          default: "Alarm configuration"
        Parameters: 
          - UseAlarm
          - NotificationPhoneNumber


Outputs:
  WebsiteUrl:
    Description:  URL of the website
    Value: !GetAtt WebsiteS3Bucket.WebsiteURL

  # They don't give you the URL, you have to EARN it.
  # This output depends on the names of the SAM-generated resources.  
  # If they change the generated resource names, this code won't work:
  RestAPIProdStageURL:
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApiProdStage}/
    Description: URL of the Prod Stage of the generated REST API.  This is the thing you call.

  ApiGatewayInManagementConsole:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ServerlessRestApi}/resources/${ServerlessRestApiProdStage}
    Description: Handy link to the Management Console location where this API can be seen.
